###############
Strings en Java
###############

Ja hem vist a :doc:`java_tipus`, els Strings no són un tipus primitiu a
Java, sinó *objectes*.  Malgrat en aquesta primera visió del llenguatge
estem evitant tractar els objectes, amb els Strings farem una excepció,
donat que els farem servir en molts dels nostres primers programes.

Així, a aquesta secció trobaràs una visió resumida de les operacions més
bàsiques que habitualment fem amb Strings.


Concatenació de strings
=======================

A l'igual que Python, Java ens ofereix l'operador ``+`` per concatenar strings.
Així

.. code-block:: none

    jshell> "hola" + " i " +  "adeu"
    $1 ==> "hola i adeu"

Comparació d'igualtat
=====================

A Python, la comparació entre strings era igual que entre altres tipus de dades
com ara enters; és a dir, fent servir l'operador d'igualtat ``==``.  Per exemple:

.. code-block:: python

    print(text1)        # escriu 'hola'
    print(text2)        # escriu 'hola'
    text1 == text2      # retorna True

Això no és possible amb Java. La manera de comparar dos Strings per
igualtat la farem el següent:

.. code-block:: java

    System.out.println(text1);  // escriu "hola"
    System.out.println(text2);  // escriu "hola"
    text1 == text2              // podria retonar false!
    text1.equals(text2)         // retorna true

A diferència de Python, les variables en Java **no** representen valors
sinó contenidors de valors. El valor que conté ``text1`` no és ``"hola"``
en Java, sinó la posició de memòria on es guarda el valor ``"hola"``. Per
tant, quan fem ``text1 == text2`` estem demanant que compari les posicions
on es troben i ``"hola"`` pot aparèixer a més d'una posició de memòria.


.. XXX vas per aquí


.. important:: Per comparar strings en Java farem servir la funció ``equals()``.

I perquè Java sí permet la comparació directa d'altres tipus, com ara enters?

.. code-block:: none
    :linenos:
    :lineno-start: 24

    jshell> int valor1 = 42;
    valor1 ==> 42

    jshell> int valor2 = entrada.nextInt();
    42
    valor2 ==> 42

    jshell> valor1 == valor2
    $11 ==> true

Doncs això té a veure amb la diferència entre tipus primitius i objectes. Pels
tipus primitius, el valor de la variable és directament el valor assignat i no
una referència a la posició de memòria on s'emmagatzema aquest valor.

En resum, en Java compararem:

* ``v1 == v2`` si ``v1`` i ``v2`` són de tipus primitiu

* ``v1.equals(v2)`` si ``v1`` no és de tipus primitiu, per exemple, string


Conversions
===========

La API de Java ens ofereix diferents maneres per a realitzar conversions entre els diferents tipus
primitius i els Strings. Aquí veurem les dels tipus que més farem servir en aquest curs.

.. code-block:: java
    :linenos:

    int valorEnter = Integer.parseInt("12345");
    double valorDecimal = Double.parseDouble("123.45");
    String cadenaEntera = String.valueOf(valorEnter);
    String cadenaDecimal = String.valueOf(valorDecimal);
    String unaAltraManera = "" + valorEnter;    // aprofita la concatenació
    String encaraUnaAltra = Integer.toString(valorEnter);

Els elements d'un String
========================

A l'igual que en Python, els strings en Java són
*immutables*. És a dir, que un cop inicialitzat, no podem canviar cap caracter
d'un string.
Per exemple, per posar a majúscules la inicial d'una paraula i la resta a minúscules,
ens caldrà fer quelcom similar al següent:

.. code-block:: java
    :linenos:

    String paraula = "cAmElL";
    char inicial = paraula.charAt(0);                           // 'c'
    String resta = paraula.substring(1);                        // "AmElL"
    char inicialMajuscules = Character.toUpperCase(inicial);    // 'C'
    String restaMinuscules = resta.toLowerCase();               // "amell"
    String paraulaCapitalitzada = inicialMajuscules + restaMinuscules;
    System.out.println(paraulaCapitalitzada);                   // escriu: Camell

Al fragment de codi anterior:

* línia 1: declara i inicialitza un String

* línia 2: extreu un caràcter de la paraula (seria l'equivalent al
  ``paraula[0]`` de Python

* línia 3: crea una nova paraula sense la primera lletra (equivalent al
  ``paraula[1:]`` de Python.

* línia 4: aconseguim la versió majúscules d'un caràcter (``inicial.upper()`` a
  Python)

* línia 5: aconseguim la versió d'un String amb totes les lletres en minúscules

* línia 6: crea un nou String amb la concatenació d'un caràcter i un String

.. _java_construccio_strings:

Construcció de Strings
======================

De vegades ens pot ser útil construir un String a partir de diferents
valors. Una manera molt còmoda de fer-ho és aprofitar la funció
``String.format()`` que espera com a paràmetres un String que defineix un
patró amb marques de variables més tants valors com hi hagi a les marques
del String.

Per exemple, considera el següent codi:

.. code-block:: java

    int edat = 19;
    String nom = "Nefertiti";
    String cognoms = "Peláez Ramírez";
    String missatge = String.format("%s %s és %s d'edat doncs té %d any%s%n",
                                    nom, cognoms, 
                                    edat < 18 ? "menor": "major", 
                                    edat, 
                                    edat == 1 ? "" : "s");

    // missatge.equals("Nefertiti Peláez Ramírez és major d'edat doncs té 19 anys\n")

Trobaràs tot el detall sobre els elements que poden aparèixer dins del
patró de ``String.format()`` a la secció `Format String Syntax
<http://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax>`_.


Per saber més
=============

Hi ha tot un munt d'altres possibilitats de manipulació i de conversió a i de Strings a:

* API `Strings <https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/String.html>`_
* API `Integer <https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/Integer.html>`_
* API `Double <https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/Double.html>`_
* API `Character <https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/Character.html>`_

.. _exercici_manipulantstrings:

Exercici 8. Manipulant Strings
==============================

En aquest exercici et toca revisar la documentació oficial.

Considera que disposes d'una referència a String anomenada ``paraula`` que conté una paraula amb un
mínim de quatre lletres.

Proposa un codi que mostri:

#. La segona lletra de la paraula


#. La longitud de la paraula (quantes lletres conté)


#. La darrera lletra de la paraula


#. La paraula amb totes les lletres en majúscules


#. La paraula amb la darrera lletra moguda a l'inici (ex. si era "Hola" mostra "aHol")


#. La paraula amb les primeres tres lletres en majúscules i la resta en minúscules

Pots fer servir ``jshell`` per fer les proves.
