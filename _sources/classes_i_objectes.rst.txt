##################
Classes i objectes
##################

En aquests continguts, tindràs una primera visió dels conceptes *classe* i *objecte*.

Aquesta introducció es realitza de manera pràctica, guiada amb
exercicis que progressivament incorporen diferents perspectives dels
conceptes a tractar.

Hola gat Renat!
===============

Coneixerem ara a un nou amic que ens acompanyarà en aquest viatge de
descobriment de la programació orientada a objectes: el gat Renat.

Exercici 1. El gat Renat té set vides
-------------------------------------

Considera el següent codi:

.. code-block:: java
    :linenos:

    public class GatRenat {
        int vides = 7;                // vides disponibles del gat Renat
        public static void main(String[] args) {
            GatRenat renat;           // declarem la referència al gat
            renat = new GatRenat();   // creem la instància del gat Renat.
            System.out.println("Al gat Renat li queden " + renat.vides + " vides");
        }
    }

Copia i executa el codi i contesta les següents preguntes:

1. Quin ha de ser el nom del fitxer que contingui aquest codi perquè
   funcioni?

2. A quina línia està declarada la variable ``renat`` que apareix a la
   línia 6?

3. A quina línia s'assigna el valor que es mostra per pantalla?

4. Quin valor apareix si a aquesta línia no s'assigna cap valor?

5. Què passaria sí la línia 5 no hi fos? Perquè creus?

6. Perquè creus que el comentari de la línia 4 parla de *referència*?
   Quina relació té amb el concepte de *variable*?

7. La línia 5 parla d'*instància*. En aquest context, una instància es
   pot entendre com el contingut real al que fa referència la variable
   ``renat``. Es diu que la instància es *construeix* amb l'operador
   ``new`` i això implica bàsicament que es reserva espai de memòria
   per a allotjar tota la informació relativa a la instància.

   Descriu, respecte aquesta línia quina és la instància, quina la variable,
   quina la referència, quin el valor i quina la classe.

El resultat de l'exercici consistirà en el fitxer **en text pla**, amb el codi
i, al final d'aquest, en forma de comentaris, cada pregunta amb la seva
resposta.

No oblidis posar el nom de l'autor/l'autora (el teu és clar), la data
i una petita descripció del contingut, al començament del fitxer.

Exercici 2. El gat Renat té un accident
---------------------------------------

Podem canviar el nombre de vides del gat Renat simplement afegint les
següents línies al final del ``main()``:

.. code-block:: java
    :linenos:

    public class GatRenat {
        int vides = 7;                // vides disponibles del gat Renat
        public static void main(String[] args) {
            GatRenat renat;           // declarem l'objecte (la referència) al gat
            renat = new GatRenat();   // creem la instància del gat Renat.
            System.out.println("Abans el gat Renat tenia " + renat.vides + " vides");
            renat.vides = renat.vides - 1;  // Renat ha tingut un accident
            System.out.println("Ara el gat Renat té " + renat.vides);
        }
    }

Modifica la classe ``GatRenat`` amb els canvis, executa el codi i contesta
les següents preguntes:

1. Com podem consultar (llegir, obtenir) el valor d'una propietat de
   la instància?

2. Com podem canviar (escriure, assignar) el valor d'una propietat de
   la instància?

3. És possible indicar que el gat Renat té -12 vides? Com? És quelcom
   desitjable que pugui passar? En cas que es pugui, com ho podries
   evitar fent servir els coneixements de programació estructurada i modular?

Exercici 3. Hi ha dos gats Renat?
---------------------------------

Als exercicis anteriors hem definit una classe anomenada ``GatRenat``, i n'hem creat una instància a
la que ens hem referit amb la variable *renat*. Tot plegat, ens pot portar a creure que la classe
``GatRenat`` representa a un únic exemplar de gat Renat. Però no és el cas. En podem fer més de Renats.

Per simplicitat, és preferible entendre que la classe engloba a un *tipus* o
*classe* de gat molt particular, que coneixem de manera genèrica com a *GatRenat*.

Considera el següent codi en el que tindrem més d'un gat Renat:

.. code-block:: java
    :linenos:

    public class GatRenat {
        int vides = 7;   // vides disponibles del gat Renat

        public static void main(String[] args) {
            GatRenat renat_I;
            renat_I = new GatRenat();               // crea un primer gat Renat
            System.out.println("El gat Renat I té  " + renat_I.vides + " vides");

            GatRenat renat_II = new GatRenat();     // crea un segon gat Renat!
            System.out.println("El gat Renat II té " + renat_II.vides + " vides");

            renat_I.vides++;
            System.out.println("El gat Renat I té  " + renat_I.vides + " vides");
            System.out.println("El gat Renat II té " + renat_II.vides + " vides");

            renat_II = renat_I; // atenció: la instància de Renat II es perd!
            System.out.println("El gat Renat I té  " + renat_I.vides + " vides");
            System.out.println("El gat Renat II té " + renat_II.vides + " vides");

            renat_I.vides++;
            System.out.println("El gat Renat I té  " + renat_I.vides + " vides");
            System.out.println("El gat Renat II té " + renat_II.vides + " vides");
        }
    }

Copia i executa el codi i contesta les següents preguntes:

1. Quanta memòria ocupa, com a mínim, una instància de ``GatRenat``?

2. Quantes instàncies hi ha de ``GatRenat`` tot just executat el codi fins la línia 5 (inclosa)?

3. I fins la línia 6?

4. I fins la línia 9?

5. Perquè les línies 7 i 10 mostren les mateixes vides pels gats Renat
   I i Renat II?

6. Perquè les línies 13 i 14 mostren diferent nombre de vides pels
   gats Renat I i Renat II?

7. Què creus que vol dir el comentari de la línia 16?

8. Perquè les línies 17 i 18 mostren les mateixes vides pels gats
   Renat I i Renat II?

9. Perquè les línies 21 i 22 mostren les mateixes vides pels gats
   Renat I i Renat II malgrat la instrucció de la línia 20?

10. Quantes instàncies hi ha quan s'executa la l'inia 20? Perquè?

Exercici 4. Renat també des de fora
-----------------------------------

Considera ara el següent codi que apareix a un altre fitxer:

.. code-block:: java
    :linenos:

    public class UsaGatRenat {
        public static void main(String[] args) {
            GatRenat renat = new GatRenat();
            System.out.println("Al gat Renat li queden " + renat.vides + " vides");
        }
    }

Copia el codi en un fitxer al mateix directori que el de l'exercici
anterior i executa'l.

Respon a les següents preguntes:

1. Quin és el nom del fitxer on està definit el punt d'entrada ``main()`` d'aquest programa?

2. Ara tenim dos fitxers amb ``main()``. Com pot saber Java quin és el
   ``main()`` a executar?

3. A quin fitxer està definida la classe del gat Renat?

4. Quants programes es podrien construir fent ús de la definició del gat Renat?

5. Què passaria si el fitxer amb el codi anterior i el que conté la
   definició de la classe del Renat estiguessin en directoris
   diferents? (prova-ho!)

6. Elimina el ``main()`` de ``GatRenat``. Continua funcionant ``UsaGatRenat``?
   Què ha deixat de poder-se executar?

Per a aquest, com potser ja has imaginat, caldrà lliurar els dos
fitxers. Fes servir la utilitat tar per a agrupar-los.

.. _classes_i_objectes_exercici5:

Exercici 5. Renat té estat
--------------------------

El gat Renat pot estar dret, assegut o estirat. Modifica la definició
de la seva classe perquè pugui guardar aquesta informació, fent que
inicialment estigui estirat.

Crea un ``main()`` dins de la definició de la classe, que instanciï un
gat Renat, mostri el nombre de vides i l'estat per defecte, canviï
l'estat a assegut i torni a mostrar el nou estat.

Crea un altre main() fora de la definició de la classe, que instanciï
un gat Renat, mostri el nombre de vides i l'estat per defecte, canviï
l'estat a dret i torni a mostrar el nou estat.

Pista: el tipus de dades per codificar l'estat podria ser ``String``.

.. note:: Aquest exercici disposa d'un 
   :download:`test unitari <_recursos/E5GatRenatTest.java>`.
   Assegura't que el teu codi passa tots els tests.

   Considera aquesta :doc:`guia <instal_junit>` per realitzar el test.

Exercici 6. El Renat té sempre un nombre de vides correcte
----------------------------------------------------------

Ja hem comentat abans que deixar una propietat pública perquè tothom pugui
modificar-la pot portar a problemes. Per exemple, al gat Renat li podem
posar impunement -15 vides.

Considera el següent codi:

.. code-block:: java
    :linenos:

    public class GatRenat {
        private int vides = 7;   // vides disponibles del gat Renat
        public int getVides() {  // mètode que retorna el nombre de vides
            return vides;
        }
        public void setVides(int vides) {
            // modifica el nombre de vides del gat si el paràmetre vides conté un valor vàlid
            if (vides >= 0) {
                this.vides = vides;   // de moment passem per alt aquest "this"
            }
        }
    }

Contesta les següents preguntes:

1. Què passa si intentes executar el següent codi? Perquè creus?

.. code-block:: java
    :linenos:

    public class UsaGatRenat {
        public static void main(String[] args) {
            GatRenat renat = new GatRenat();
            renat.vides = renat.vides + 1;
            System.out.println("Al gat Renat li queden " + renat.getVides() + " vides");
        }
    }

2. Què s'està declarant a la línia 3 de la definició de la classe ``GatRenat``? Així, que pot voler
   dir *mètode* en notació POO?

3. Indica quina sortida genera el següent ``main()`` i explica perquè és aquesta?

.. code-block:: java
    :linenos:

       public static void main(String[] args) {
           GatRenat renat = new GatRenat();
           System.out.println("Al gat Renat li queden " + renat.getVides() + " vides");
           renat.setVides(-12);
           System.out.println("Al gat Renat li queden " + renat.getVides() + " vides");
           renat.setVides(12);
           System.out.println("Al gat Renat li queden " + renat.getVides() + " vides");
       }

4. Sense modificar la classe ``GatRenat``, és possible aconseguir que una instància de ``GatRenat`` pugui
   tenir un nombre de vides negatiu?  Perquè o Com?

Exercici 7. L'estat del Renat és sempre bo!
-------------------------------------------

Crea els mètodes *setters* i *getters* necessaris per garantir que l'estat
del Renat sigui sempre correcte, a l'hora que pugui ser canviat.

Recorda que els estats vàlids del gat renat són **exactament**: dret,
assegut i estirat.

Crea un ``main()`` que demostri el funcionament dels nous mètodes.

.. note:: Aquest exercici disposa d'un 
   :download:`test unitari <_recursos/E7GatRenatTest.java>`.
   Assegura't que el teu codi passa tots els tests.

Exercici 8. Com està Renat?
---------------------------

De vegades amb els *accessors* (mètodes *getters* i *setters*) no
resulta pràctic treballar. Així, cal afegir nous mètodes que permetin
un ús més còmode.

Afegeix al repertori de mètodes del Renat els següents:

1. ``boolean estaViu()`` // cert si encara li queda alguna vida

2. ``boolean estaDret()``, ``boolean estaAssegut()``, ``boolean estaEstirat()``

Crea un ``main()`` que demostri el funcionament dels nous mètodes.

.. note:: Aquest exercici disposa d'un 
   :download:`test unitari <_recursos/E8GatRenatTest.java>`.
   Assegura't que el teu codi passa tots els tests.


Exercici 9. El gat Renat està ensinistrat!
------------------------------------------

Una de les gràcies de la POO és que podem tractar peces de codi com si
tinguessin una mena de personalitat pròpia. És el que es coneix com
*la metàfora de la POO*. Així, podem imaginar que els objectes ens
realitzen serveis o que els podem donar ordres. Ho visualitzarem amb
el nostre pacient amic Renat.

Afegeix tres nous mètodes: ``String aixecat()``, ``String seu()``, i
``String estirat()`` de manera que quan vulguem, per exemple, que Renat
s'aixequi simplement li diguem  ``renat.aixecat();``.

En cas que el Renat ja estigués en l'estat que se li demana, no fa cap canvi d'estat.

Aquestes funcions retornaran un missatge indicant el que ha fet el Renat. Així, els missatges que
ens retornarà poden ser:

* m'estiro

* m'assec

* m'aixeco

* no faig res

Crea un ``main()`` que demostri el funcionament dels nous mètodes.

**Atenció**: els nous mètodes **no** han d'escriure res per sortida estàndard.


.. note:: Aquest exercici disposa d'un 
   :download:`test unitari <_recursos/E9GatRenatTest.java>`.
   Assegura't que el teu codi passa tots els tests.

.. _classes_i_objectes_exercici10:

Exercici 10. Protegim encara més l'estat del Renat
--------------------------------------------------

El fet que l'estat del gat estigui codificat amb un String, no deixa de ser una incomoditat. Hom es
pot equivocar teclejant i la detecció no és massa senzilla. Has de fer un munt de comprovacions.

Cerca per la web el concepte de enum en java i tracta de millorar la definició del Renat creant una
enumeració anomenada ``GatEstat`` i canviant el tipus de la propietat ``estat`` de String a
``GatEstat``.

Una bona font de consulta és el `tutorial de enumerats
<https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html>`_ "oficial". Per les necessitats
d'aquest exercici, n'hi ha prou amb que entenguis parcialment l'exemple dels dies de la setmana. Per
fer-ho, crea dos fitxers anomenats ``Day.java`` i ``EnumTest.java``. Copia-hi dins el codi
corresponent que apareix al tutorial i executa ``EnumTest``.

Fixa't com es defineixen els valors vàlids de l'enumerat ``Days`` i com, per referir-se als dilluns,
el codi de ``EnumTest.java`` escriu ``Day.MONDAY``. Ignora tot el que no entenguis del tutorial i,
en cas que no puguis extreure'n informació útil per fer aquest exercici, passa a un altre tutorial
més fàcil o pregunta!

De manera similar a ``Days``, hauràs de crear ``GatEstat``. Els valors possibles de ``GatEstat``
seràn: ESTIRAT, ASSEGUT i DRET.

Afegeix, si no hi són ja, els següents mètodes

1. ``void setEstat(String)``

   Assigna l'estat a partir d'un String. Si el string no es correspon
   amb un estat vàlid, no canvia res. Aquest mètode sembla, des de fora, el que ja teníem.
   Internament, però, canviarà.

2. ``void setEstat(GatEstat)``

   Assigna l'estat a partir d'un GatEstat. Sí, té el mateix nom que la funció anterior. Cerca
   *method overloading* o sobrecàrrega de mètodes, en cas que ja no recordis que ja el varem tractar
   :ref:`aquí<intro_lang_overloading>`.

3. ``GatEstat getEstat()``

   Retorna l'estat del gat com a GatEstat. 

4. ``String getEstatComString()``

   Retorna l'estat del gat en forma de String.
   Fixa't que ara no podem posar-li el mateix nom que a l'anterior mètode doncs la sobrecàrrega no
   distingeix el tipus de retorn.

   .. important:: Aquest canvi provocarà, per primer cop en aquest
       curs, que els programes dels exercicis anteriors deixin de funcionar. Com pots imaginar-te,
       no és una situació desitjable sinó ben al contrari! En tot cas, de vegades passa. Esperem que
       els desenvolupadors del Món no hagin generat massa programes crítics fent servir la nostra
       classe ``GatRenat`` i que, en tot cas, els puguin modificar per a poder gaudir de la nova
       versió.

És probable que et calgui realitzar algun altre canvi en el codi de mètodes existents. Prova de
realitzar-los sense modificar-los la signatura.

Perquè creus que el codi de ``setEstat()`` es tan diferent en
complexitat depenent del tipus paràmetre que rep? Afegeix aquest
comentari al codi del mètode més senzill. Inclou als comentaris una
descripció amb les teves paraules.

Executa el codi amb un ``main()`` del problema anterior. Funciona
sense haver de modificar res? Perquè creus que és així? Quin avantatge
hi trobes? Crea un nou ``main()`` ampliant l'anterior que demostri el
funcionament dels nous mètodes. Afegeix-hi les teves reflexions.

.. note:: Aquest exercici disposa d'un 
   :download:`test unitari <_recursos/E10GatRenatTest.java>`.
   Assegura't que el teu codi passa tots els tests.

Exercici 11. Què he aprés de les classes i objectes?
----------------------------------------------------

Fes un repàs dels continguts d'aquest tema incloent els exercicis anteriors.
Indica exercici a exercici què has aprés de nou en fer-lo, o bé quins són els
conceptes que introdueix l'exercici, si ja els coneixies anteriorment. Procura
ser molt concret. Si et cal, ajuda't de (nous) exemples.

En el cas que no hagis entès algun dels exercicis… bé, aquest cas no es pot donar ja que, abans de
fer aquest exercici t'ajudaràs de les diferents fonts de suport que tens al teu abast (incloent, és
clar, consultes al teu docent) per arribar a entendre'l. És a dir, **no val** dir, que un exercici
no l'has entès! Entesos?

Redacta aquest exercici en un document de text pla. Et recomano que facis servir
algun format de text de marques com ara :doc:`reStructuredText <rst.intro>`
o `markdown
<https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet>`_.

----

*Ref. 20.1.1*
