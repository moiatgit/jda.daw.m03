######################################################
Classes, subclasses, classes abstractes, *interfaces*?
######################################################

Amb les *interfaces*, hem afegit una nova eina d'expressió al nostre calaix, en el que ja
teníem les classes "normals", l'herència i les classes abstractes.

Ara bé, quan escollirem una opció o una altra?

Aquesta és una recepta per a decidir si vols una classe, una subclasse, una classe
abstracta o una *interface*.

1. Si de la teva nova classe només pots dir que és un *Object* (*is a*),
   llavors fes una classe concreta

2. Si la teva nova classe correspon a una versió més específica d'una
   altra existent, fes una subclasse (recorda el principi de
   substitució de Liskov)

3. Si et cal realitzar una plantilla per a un conjunt de classes i
   disposes d'algun codi que totes les subclasses podrien fer servir,
   i no t'interessa que es pugui instanciar aquesta classe, crea una
   classe abstracta

4. Si et cal definir un rol al que altres classes hagin de jugar, amb
   independència de la posició d'aquestes a l'arbre jeràrquic, fes-ho
   amb una *interface*.

