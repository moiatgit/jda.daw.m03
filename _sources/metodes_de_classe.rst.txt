#################
Mètodes de classe
#################

Fins ara, tots els mètodes que hem programat depenien d'una instància
per a funcionar. Tots? Bé, potser només fins on hem estat conscients.

Per cridar-los, ens calia indicar «referència a la instància».«nom del
mètode» o, des del codi d'un mètode de la classe també podíem
directament cridar el nom del mètode.

Per exemple, a la classe Hora, el mètode d'incrementar un segon
requeria una instància d'hora a qui aplicar-lo. Dèiem 

.. code-block:: java

    Hora h = new Hora();
    h.incrSeg();

Ara bé, imagina que volguéssim comprovar que els valors d'una hora són
vàlids abans d'assignar-los a una instància de Hora. El mètode podria
ser quelcom semblant a 

.. code-block:: java

    public boolean esValida(int h, int m, int s) {...}

Aquest mètode, però, no requeriria l'accés a l'estat de cap instància
de Hora, i amb qualsevol instància de Hora hauria de donar el mateix
resultat. Per a poder-lo usar, ens caldria, però, crear una instància
que probablement no la voldrem per res més. Per exemple: 

.. code-block:: java

    if (new Hora().esValida(14, 12, 21)) {
        Hora hora = new Hora(14, 12, 21);
    }

Per a solucionar aquest tipus de situacions, la POO ens ofereix la
possibilitat de distingir mètodes de classe de mètodes d'instància.
Aquest de esValida() seria clarament un mètode de classe ja que no depèn
de cap instància per a ser executat.

Java ens permet indicar que un mètode és de classe amb la paraula
reservada static. Així, el mètode ``esValida()`` tindria el següent aspecte 

.. code-block:: java

    public static boolean esValida(int h, int m, int s) {...}

Per a ser utilitzat, a banda de com abans, també podríem fer-ho d'una
manera més eficient amb: 

.. code-block:: java

    if (Hora.esValida(14, 12, 21)) {
        Hora hora = new Hora(14, 12, 21);
    }

Fixa't que ara, en comptes de cridar al mètode des d'una instància, ho
fem directament a partir de la classe!

Ara potser comença a tenir sentit la paraula ``static`` del
``main()``, oi?

.. _metodesdeclasse_exercici:

Exercici 1. Mètodes de classe
=============================

En aquest exercici es demana que ampliïs la classe ``Hora`` que vas desenvolupar en :ref:`aquest
exercici <constructors_i_exercici_classe_hora>` amb els mètodes estàtics: 

* ``boolean esValida(int, int, int)``: retorna true si i només sí les
  hores, minuts i segons indicats, en aquest ordre, pels paràmetres,
  corresponen a una combinació vàlida per una hora.

* ``int compareTo(Hora, Hora)``: retorna -1 si la primera hora és
  menor que (anterior a) la segona, 0 si són iguals i 1 si la primera
  és més gran que (posterior a) la segona.

* ``Hora duplica(Hora)``: retorna una nova instància de la classe Hora
  amb els mateixos valors per les propietats de l'hora rebuda.

Aquest últim retorna una nova instància de Hora amb els mateixos
valors de la que rep.

.. note:: Aquest exercici disposa d'un test de prova que pots descarregar-te :download:`d'aquí
   <_recursos/E004001ClasseHoraTest.java>`.

----

*Ref. 20.1.3.1*
