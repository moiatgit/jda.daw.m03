##########################
Expressions i Instruccions
##########################

En aquesta secció veurem com dades i operadors s'ajunten per a construir
*expressions*, com aquestes expressions permeten construir *instruccions* i
finalment, com seqüències d'instruccions s'agrupen en *blocs*.

Encara que trobarem algunes particularitats respecte Python, en aquest
tema també ens hauríem de sentir confortables.

Expressions
===========

Les *expressions* són seqüències de dades (variables, constants i
literals), operadors i crides a funcions, ordenats respectant algunes
regles sintàctiques molt bàsiques que, en ser avaluades, generen un valor
resultant.

Donat que els :doc:`operadors <java.operadors>` tenen una precedència, els
elements d'una expressió sempre s'avaluen en el mateix ordre. Si no ens
interessa l'ordre de precedència *natural* o bé, ens interessa
remarcar-ho, podem fer servir parèntesis ``()`` per definir l'ordre en que
volem que s'avaluïn. Per exemple:

.. code-block:: java

    double resultat = 3.1 * 4.3 + Math.sqrt(64)
    //     ^ inici de l'expressió
    //                    ^ (1) primer càlcul (3.1 * 4.3)
    //                            ^ (2) avaluació de l'arrel quadrada de 5.2
    //                          ^ (3) suma
    //              ^ (4) assignació

Gràficament el podem representar com:

.. graphviz::
    :align: center

    digraph {
        expr -> a -> b -> c -> d;
        expr [shape=box,label="resultat = 3.1 * 4.3 + Math.sqrt(64.0)"];
        a [label="(1) 3.1 * 4.3 → 13.33"];
        b [label="(2) Math.sqrt(64.0) → 8.0"];
        c [label="(3) 13.33 + 8.0 → 21.33"];
        d [label="(4) resultat = 21.33"];
    }

Podem explicitar l'ordre d'avaluació de l'expressió anterior amb els parèntesis:

.. code-block:: java

    double resultat = ( (3.1 * 4.3) + ( Math.sqrt(64.0) ) )

I, per suposat, també podem alterar aquest ordre amb els parèntesis:

.. code-block:: java

    double resultat = ( 3.1 * (4.3 + ( Math.sqrt(64.0) ) ) )
    //                             ^ la suma es calcularà abans que el producte!

.. note::

    Per afavorir la llegibilitat, és preferible que afegeixis parèntesis
    en expressions complexes.  Això permetrà que sigui més fàcil
    d'entendre per algú altre (potser tu un altre dia) doncs no obligarà a
    haver de tenir present les regles de precedència.


Instruccions
============

Una *instrucció* és una unitat completa d'execució. En Java, les instruccions acaben en punt i coma
``;``.

Les instruccions en Java poden ser d'expressió, de declaració i de control de flux.

Les instruccions d'expressió es poden construir finalitzant amb un punt i coma alguna de les següents expressions:

* expressions amb assignació

  .. code-block:: java

        a = 3;

* expressions amb un operador unari d'increment o decrement (``++`` o ``--``)

  .. code-block:: java

        ++a;

* una crida a una funció

  .. code-block:: java

        System.out.println("Hola Món!");

* una expressió de creació d'objectes

  .. code-block:: java

        notesAlumne = new int[4];
        //            ^ inici de l'expressió amb l'operador new

Les instruccions de declaració són les declaren un element (com per
exemple una variable):

.. code-block:: java

    int[] notesAlumne;

Més endavant veurem altres tipus d'instruccions de declaració i les
instruccions de control de flux (com ara els condidionals)


Blocs
=====

Finalment, les instruccions s'agrupen en blocs. En Java, un *bloc*
d'instruccions està format per zero o més instruccions entre claus ``{}``.
És similar al que fèiem a Python amb la indentació.

Quan el nombre d'instruccions del bloc és menor que dos, no és obligatori
posar les claus. En tot cas, és **sempre** recomanable incloure-les per a
afavorir la llegibilitat i mantenibilitat del nostre codi.

Un cop tenim un bloc d'instruccions, aquest funciona en conjunt com si fos
una única instrucció i, per exemple, pot formar part d'un bloc superior.

Així, el bloc mínim seria ``{}`` (bloc amb zero instruccions), el que
Python ens requeriria fer servir ``pass``.

Per exemple:

.. code-block:: java

    public class HolaBlocs {
    //                     ^ inici bloc 0
        public static void main(String[] args) {
    //                                         ^ inici bloc 1
            int n = 3;
            System.out.print("El valor ");
            System.out.print(n);
            if (n % 2 == 0) {
    //                      ^ inici bloc 2
                System.out.println(" és parell");
            } else {
    //      ^ final bloc 2
    //             ^ inici bloc 3
                System.out.println("és senar");
            }
    //      ^ final bloc 3
        }
    //  ^ final bloc 1
    }   // final bloc 0



El codi anterior, en Python seria quelcom similar a:

.. code-block:: python

    # inici bloc 0
    def main():
        # inici bloc 1
        n = 3
        print(f"El valor {n} és ", end='')
        if n % 2 == 0:
            # inici bloc 2
            print("parell")
            # final bloc 2
        else:
            # inici bloc 3
            print("senar")
            # final bloc 3
        # final bloc 1
    # final bloc 0


Que, gràficament, el podríem representar com:

.. graphviz::
    :align: center

    graph G {
      node [shape=box];
      subgraph clusterA {
        subgraph clusterB {
          a;
          b;
          a [label="bloc 2"];
          b [label="bloc 3"];
          label="bloc 1";
        }
        label="bloc 0";
      }
    }


.. important:: A diferència de Python, Java no fa servir la indentació per
               delimitar els blocs. Per aquesta raó, la indentació no és
               obligatòria en Java, encara que **sí** per a aquest curs i
               per qualsevol producció que vulguis realitzar amb qualitat.

               Pensa que el codi de l'exemple anterior seria igual de
               vàlid si hagués estat escrit de la següent manera:

               .. code-block:: java

                   public class HolaBlocs{public static void main(String[] args){int n=3;if(n%2==0){System.out.print("El valor ");System.out.print(n);System.out.println(" és parell");}else{System.out.println("és senar");}}}

               Com et sentiries si haguessis de llegir aquest codi?

               Malgrat hi ha eines per indentar automàticament, és
               **molt** recomanable que quan estiguis codificant,
               t'acostumis a anar indentant correctament. Et facilitaràs
               molt la vida.

