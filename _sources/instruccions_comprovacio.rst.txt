#######################
Comprovem els programes
#######################

Amb una mica de pràctica podem anar agafant-li el truc a això de programar, oi?

Hi ha, però, un punt que no acaba d'estar resolt. Cada cop que fem un programa,
l'hem de provar. És una part més o menys mecànica i tediosa, però
imprescindible.

De moment, els programes són facilets i, per tant, les proves també.
Bàsicament realitzes l'exemple d'execució que inclous a la capçalera i
comproves visualment que el resultat coincideix amb l'esperat.

Amb tot, imagina't que vols tenir la certesa que el resultat és **exactament**
l'esperat. És més, imagina't que volguessis fer aquesta comprovació sense
necessitat d'haver de mirar tu el resultat, fent que algú altre ho comprovés
per tu: per exemple, **un programa!**

En els propers exercicis t'he inclòs un mecanisme automàtic per que puguis
comprovar si el teu codi compleix uns mínims.

Per executar aquest mecanisme, hauràs de realitzar els exercicis en la carpeta
que se t'indiqui. Si el títol de l'exercici porta el símbol **☞**, voldrà dir
que al teu repositori t'hauré afegit un test per a aquest exercici.

No et perdis l'explicació de com realitzar les proves a l'enunciat del següent
exercici.

.. _exercici_quadratnum:

Exercici 7. ☞ El quadrat d'un número
====================================

Desenvolupa un programa a ``01_07_quadratnumero/`` que demani un número i
escrigui el número al quadrat.

Una possible interacció:

.. code-block:: none
    :emphasize-lines: 3

    $ python3 quadratnum.py
    Donam un número:
    4
    El quadrat de 4 és 16

Per comprovar que el teu programa passa les proves, executa la següent comanda:

.. code-block:: bash

    $ bash test/test.sh

Quan no hi ha error, el programa t'ho indicarà amb el missatge:

.. code-block:: bash

    El programa quadratnum.py ha passat totes les proves

En cas, però que hi trobi algun error, el programa et donarà informació per que
puguis identificar el problema i resoldre'l.

Un exemple de sortida d'error seria:

.. code-block:: none

    $ bash test/test.sh
    Error
    =====
    No es troba el programa quadratnum.py
    Assegura't que has posat el nom correcte al teu programa

El que t'està indicant aquest error és que el programa de test no troba el teu
programa. És possible que hagis escrit el nom del fitxer malament. Et recomano
que el repassis amb compte.

Imagina que has escrit com a nom ``cuadratnum.py`` (fixat la ``c`` en comptes de
la ``q``). En aquest cas, potser el voldràs reanomenar. Una manera és seguir les
instruccions:

* tanca l'editor amb el teu programa si encara el tens obert.

* a la consola escriu:

  .. code-block:: bash

        $ mv cuadratnum.py quadratnum.py

* torna a executar la prova.

Un altre exemple de sortida d'error seria:

.. code-block:: bash
    :linenos:

    $ bash test/test.sh
    Test nr. 1: Error

    Entrada
    =======
    4

    Sortida esperada
    ================
    Donam un número
    El quadrat de 4 és 16

    Sortida trobada
    ===============
    Donam un número
    El quadrat de 4 és 17

    Diferència
    ==========
    2c2
    < El quadrat de 4 és 16
    ---
    > El quadrat de 4 és 17

A la línia 1, el programa de proves et diu que ha trobat un error. El nr. de
l'error et servirà com a referència per que m'ho comentis en cas que no trobis
la manera de resoldre'l.

A la línia 6 hi trobes la entrada que el programa de prova ha introduït al teu
programa. En aquest cas ha introduït el nr. 4 doncs el teu programa espera que
l'introdueixin un número. Si li calguessin més dades, aquí hi apareixerien
totes, cadascuna en la seva línia.

A partir de la línia 10 hi apareix totes les sortides que s'esperaven del teu
programa. Es tracta de tot el que surt amb ``print()`` en fer l'execució.

Fixa't que també inclou el text amb la pregunta que fa el teu programa als
usuaris.

A partir de la línia 15, et mostra la sortida que realment ha fet el
teu programa amb l'entrada indicada.

A partir de la línia 20, et mostra la sortida de la utilitat ``diff`` que et pot
ajudar a identificar les diferències entre l'esperat i el trobat.

La manera que et proposo que procedeixis si no has vist el problema amb la
informació que et mostra el programa de prova és:

* executa el teu programa

* introdueix per teclat el que se t'indica a la secció *Entrada* (línia 6). En
  aquest cas un 4

* comprova que el teu programa estigui escrivint tot allò que s'espera (mira
  secció *Sortida esperada* (línia 10 en davant)

Si tot i així no te'n surts, demana ajut. No et preocupis, amb la pràctica es fa
més fàcil.

Recorda finalment registrar els canvis en ``git`` i pujar el teu resultat al
repositori remot.

.. _exercici_meitatnum:

Exercici 8. ☞ La meitat d'un número
===================================

Desenvolupa un programa a ``01_08_meitatnum/`` que demani
un número i escrigui la meitat del número introduït.

La interacció podria ser similar al següent:

.. code-block:: none
    :emphasize-lines: 3

    $ python3 meitatnum.py
    Donam un número:
    4
    La meitat de 4 és 2.0

Fixa't que molt probablement ens escriurà ``2.0`` en comptes de l'esperat
``2``. Python sap que en dividir poden sortir decimals i per tant

.. code-block:: python

    >>> type(4/2)
    <class 'float'>

Comprova què escriu si demanem ``5`` en comptes de ``4``.

Com a l'exercici anterior, comprova que passes les proves abans de pujar la
versió al repositori remot.

.. _exercici_edataproximada:

Exercici 9. ☞ L'edat aproximada
===============================

.. {{any:2019}}

Desenvolupa un programa a ``01_09_edataproximada/`` que demani el nom dels
usuaris, l'any actual i l'any de naixement, calculi d'edat que tenen.

La interacció serà:

.. code-block:: none

    $ python3 edataproximada.py
    Quin és el seu nom?
    Midori
    Hola Midori. Quin any vas nèixer?
    1999
    I, a quin any som?
    2019
    Doncs Midori, diria que tens 20 o 21 anys


.. _exercici_calculadorabasica_python:

Exercici 10. ☞ Una calculadora bàsica
=====================================

Desenvolupa una calculadora bàsica que demani a l'usuari dos operands enters i
mostri el resultat de realitzar les operacions bàsiques (+ - * /) sobre
els operands.

Exemple d'interacció: ::

    $ python3 calculadorabasica.py
    Primer operand?
    6
    Segon operand?
    2
    6 + 2 = 8
    6 - 2 = 4
    6 * 2 = 12
    6 / 2 = 3.0

No et preocupis si alguna operació no és vàlida pels valors introduïts.
