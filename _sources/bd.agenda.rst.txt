########
L'agenda
########

Havent vist el llistat de contactes desenvolupat a l'exercici del :ref:`llistat
de contactes <exercici_hashmap_llistat_contactes>`, hem trobat que podria ser
una aplicació molt més interessant si fem servir una base de dades per guardar
la informació dels nostres contactes.

En aquesta primera versió de la nostra agenda, la interfície amb els usuaris
serà amb format entorn operatiu.

Els continguts d'aquest enunciat es distribueixen en els següents apartats:

.. contents::
    :local:

Model Entitat-Relació
=====================

El següent diagrama d'entitat-relació descriu el nostre model de dades que
implementarem a la base de dades.

.. graphviz::
    :align: center

    digraph ERD {
      graph [   rankdir = "LR" ];
      ranksep=2;

      "CONTACTES" [ label="CONTACTES|id\l|nom\lcategoria\l" shape = "record" ];
      "MITJANS"   [ label="MITJANS|id\l|id_contacte\ltipus\lreferencia\ldescripcio\l" shape = "record" ];

      "CONTACTES"->"MITJANS" [arrowhead = crow];
    }

Als contactes els assignarem un identificador seqüèncial al camp numèric ``id`` i
disposaran, a banda del nom, la categoria. La categoria és un text amb valors
com ara ``amic``, ``família``, ``company de feina``, etc. Aquest camp pot estar
buit.

La taula ``MITJANS`` conté els diferents mitjans de contacte (email, telèfon, fax,
usuari twitter…). El valor concret del mitjà de contacte, ex. l'adreça concreta,
es guarda al camp ``referencia``. Finalment, els mitjans de contacte admeten una
descripció (ex. ``casa``, ``principal`` o ``no el fa servir``)

Tots els camps, a excepció de ``categoria`` i ``descripció`` són requerits.


Al fitxer :download:`bd.agenda.model.sql <_recursos/bd.agenda.model.sql>` hi
trobaràs sentències per crear aquestes taules en PostgreSQL i poblar-les amb
algunes dades:

.. literalinclude:: _recursos/bd.agenda.model.sql
    :language: sql
    :linenos:

Fixa't que fem servir ``SERIAL`` com a tipus pels identificadors, i ``TEXT`` com
a tipus per la major part dels camps. Si et preocupa que pugui estar-se ocupant
massa espai, et proposo que facis una ullada a `aquesta descripció
<https://www.postgresql.org/docs/9.3/datatype-character.html>`_ de la
documentació oficial.


Descripció general de l'entorn
==============================

L'entorn operatiu oferirà com a prompt:

.. code-block:: none

    agenda $ 

A banda, oferirà les opcions:

* ``ajuda``: ofereix un text amb la descripció de totes les opcions disponibles.

* ``sortir``: finalitza l'execució de l'aplicació.

Comandes de consulta
====================

A diferència del llistat de contactes, l'agenda no guarda totes les dades en
memòria. Cada cop que els usuaris llencen una consulta, va a cercar la
informació a la base de dades.

Les comandes de consulta són:

* ``llista``: mostra la llista de noms de tots els contactes

  L'ordre d'aparició dels contactes serà alfabètic per nom. Els contactes
  apareixeran paginats.

* ``cerca contacte «str»``: mostra la llista de tots els contactes que contenen el
  substring ``str`` en el nom o mitjans de contacte.

* ``cerca categoria «cat»``: mostra tots els contactes de la categoria ``cat``

* ``cerca categoria «cat» «str»``: mostra tots els contactes de la categoria ``cat``
  que continguin ``str`` en el seu nom o mitjans de contacte.

L'especificació de les cadenes es realitzarà fent servir cometes dobles, a menys
que la cadena contingui una única paraula. Per exemple:

.. code-block:: none

    agenda $ cerca categoria "amics del pare" "li gon"

L'exemple anterior, cercarà els contactes amb la categoria ``"amics del pare"``
que continguin la subcadena ``"li gon"``.

En canvi, si la categoria o el string només contenen una paraula, es podrà
indicar sense cometes:

.. code-block:: none

    agenda $ cerca categoria amics li


Comandes de modificació
=======================

A l'agenda també podrem fer comandes de modificació dels contactes.

A diferència de la llista de contactes, a l'agenda un contacte pot no tenir cap
mitjà de contacte.

* ``afegeix contacte «nom»``: crea un contacte amb el nom indicat i amb cap mitjà de
  contacte. Si ja existia un contacte amb aquest nom, mostra un avís i no fa
  cap canvi.

* ``elimina contacte «str»``: cerca els contactes que continguin ``str`` en el seu nom o
  mitjans de contacte.
  Si hi ha més d'un, indica que cal especificar més i mostra els contactes
  trobats.

  Si només resulta un únic contacte, mostra les seves dades i demana
  confirmació. Quan els usuaris confirmen, s'eliminen totes les dades del
  contacte, incloent els seus mitjans de contacte. Finalment es mostra un
  missatge informant de si s'ha eliminat o no el contacte.

* ``reanomena contacte «str» «nom»``: com ``elimina contacte`` però, quan troba
  un únic contacte, canvia el nom anterior pel nou especificat.

* ``assigna categoria «str» [«cat»]``: com ``elimina contacte`` però, quan troba
  un únic contacte, canvia la categoria anterior per la nova.
  Si la categoria no s'especifica, el contacte quedarà marcat sense categoria.

* ``afegeix mitja «str» «tipus» «ref» [«descr»]``: de la mateixa manera que
  ``elimina contacte`` cercarà un contacte i, si resulta només un, li afegirà el
  mitjà de contacte del tipus indicat.  Si el contacte ja tenia aquest mitjà de
  contacte, es mostra un avís i no fa res.

  Opcionalment es podrà especificar la descripció del mitjà de contacte.

  Si el tipus de mitjà de contacte no és un dels coneguts, es mostrarà un avís,
  tot indicant la llista dels tipus de mitjans coneguts i es demanarà
  confirmació per afegir-ne el nou.

* ``elimina mitja «str» «tipus» «ref»``: com ``afegeix mitja`` però en aquest
  cas, elimina el mitjà de contacte. Si el mitjà no hi era mostra un avís i no
  fa res.

* ``assigna descr «str» «tipus» «ref» [«descr»]``: permet assignar una nova
  descripció a un mitjà de contacte. Si no se especifica la descripció,
  l'anterior quedarà eliminada.

Al final de cada execució d'una comanda de modificació, el programa sempre
oferirà un missatge confirmant que s'ha realitzat el canvi o bé que no s'ha fet.


Paginació
=========

Donat que poden aparèixer molts contactes en algunes de les comandes, aquests
sempre es mostraran empaquetats de 5 en 5. El número podria canviar en un futur
i, fins i tot, ser possible que sigui definit pels usuaris. Per tant, el
codificarem amb una propietat final en comptes de fer servir el literal ``5``
per tot arreu!

Es proposa desenvolupar un mètode, per exemple ``mostraPaginant(List<Contacte>)`` que se n'encarregui de mostrar cada pàgina de contactes i ofereixi, per cada pàgina, les opcions:

* si no es diu res, en prèmer ``ENTER``, es mostrarà la següent pàgina. Si no
  queden més per mostrar, mostra la darrera pàgina.

* ``s``: mostra la pàgina següent. Equival a ``ENTER``.

* ``a``: mostra la pàgina anterior. Si no n'hi ha cap mostra la primera pàgina.

* ``x``: finalitzar la paginació. Els contactes no mostrats, simplement s'ignoren

Per cada contacte que aparegui a la pàgina es mostraran totes les seves dades.
Per exemple:

.. code-block:: none

    Agnes Li González (família)
    - email: agnesligonza2003@gemail.com
    - telèfon: 663832345, 681289345 (mare), 932234512 (feina), 
    - twitter: @agneslaguay

    Ramir Rezos Buendía
    - email: rezosbuendia@aibiem.com (feina), ramirbuendia@jotmeil.com
    - telèfon: 913452341
    - fax: 913452342

Fixa't que al costat del nom hi apareix, si està especificada, la seva
categoria. També, al costat de cada mitjà de contacte, si s'ha especificat,
es mostra la descripció.

Importació i exportació
=======================

Donat que la nostra agenda haurà de ser compatible amb les nostres antigues
aplicacions de llistats de contactes, oferirem les opcions d'importar i exportar
les dades a un fitxer de text en el conegut format "nom NUM tel" i "nom EMAIL
email". Les dades que no corresponguin als tipus de mitjà de contacte telèfon o
email, seran ignorades.

Les comandes seran:

* ``import cami_a_fitxer``

  Importarà els contactes del fitxer especificat. Si no es possible llegir el
  fitxer, o conté alguna línia no vàlida, es mostrarà un missatge d'error però
  es permetrà continuar l'execució del programa.

  Els contactes que ja existeixin a la BD seran ampliats si inclouen un mitjà de
  contacte nou.

* ``export cami_a_fitxer``:

  Exportarà els contactes al fitxer especificat. Si el fitxer ja existeix o no
  es pot escriure, es mostrarà un error.

  Només s'exportarà les dades sobre els mitjans de contacte de tipus telèfon i
  email. Per tant, aquells contactes que no tinguin com a mínim un d'aquests
  mitjans de contacte, no apareixeran a l'exportació.

En aquesta versió, i per simplificar, tant a l'hora de la importació com a
l'exportació, no es tindrà en compte la posició dels contactes als fitxers.


Pistes
======

Com puc extreure informació d'una cadena de text
------------------------------------------------

A l'hora de extreure la informació d'una cadena que pot estar o no entre
cometes, es pot fer servir l'expressió regular 
``text +((\"[\\p{L} ]+\")|(\\p{L}+)) +((\"[\\p{L} ]+\")|(\\p{L}+)) *$``

Aquesta expressió està dissenyada per permetre aquest tipus d'entrades:

================================    ================    ======================
text                                group(1)            group(4)
================================    ================    ======================
``text hola adéu``                  ``hola``            ``adéu``
``text "hola i adéu" món``          ``hola i adéu``     ``món``
``text hola "i adéu món"``          ``hola``            ``i adéu món``
``text "hola i" "adéu món"``        ``hola i``          ``adéu món``
================================    ================    ======================

Com puc saber quins mitjans són coneguts
----------------------------------------

Quan estàs afegint un mitjà, hi ha la possibilitat de crear un nou tipus de
mitjà. Sovint, però, el que pot passar és que ens estiguin introduïnt malament
el tipus.

Per evitar errors, se't demana la funcionalitat de demanar confirmació. Per
fer-ho, una de les opcions és fer una consulta a la taula de mitjans tot
demanant els tipus (sense repeticions).
