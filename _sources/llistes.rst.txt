#################
El tipus ``list``
#################

A banda de les tuples, Python ens ofereix dins de sintaxi del llenguatge,
un altre tipus de seqüència: les llistes.

Considera el següent:

.. code-block:: python

    >>> llista = [1, 2, 3]
    >>> type(llista)
    <class 'list'>
    >>> llista[0]
    1
    >>> len(llista)
    3
    >>> id(llista)
    139790437536200
    >>> llista = llista + [4]
    >>> llista
    [1, 2, 3, 4]
    >>> id(llista)
    139790437539656

Fins aquí cap novetat respecte les tuples, oi? Només sembla que hem
canviat els parèntesis per claudators (parèntesis quadrats) i que ara
Python li diu a aquest tipus ``list`` en comptes de ``tuple``.

Per cert, la llista buida la podem crear de manera similar a la tupla buida

.. code-block:: python

    buida = []
    tambe_buida = list()

Crear una llista amb un sol element resulta una mica més fàcil que amb tuples:

.. code-block:: python

    tupla_amb_un = ('element', )    # sí, aquella coma addicional
    llista_amb_un = ['element']     # aquí no cal la coma addicional (tot i que es pot posar!)

Són tant semblants els dos tipus de seqüència que fins i tot es poden convertir
entre elles fàcilment:

.. code-block:: python

    >>> tupla = ('un', 2, 3)
    >>> llista = list(tupla)
    >>> llista
    ['un', 2, 3]
    >>> list(tupla) == ['un', 2, 3]
    True
    >>> tupla == tuple(llista)
    True


Són semblants però **no** són iguals. Atenció a les sorpreses:

.. code-block:: python

    >>> llista
    ['un', 2, 3]
    >>> id(llista)
    139790437539656
    >>> llista[0] = 10
    >>> llista
    [10, 2, 3, 4]
    >>> id(llista)
    139790437539656

Què ha passat? Doncs que hem canviat el valor del primer element de la
llista i, potser més sorprenent, **no** ha canviat l'identificador de
l'objecte corresponent a la llista!

Sí, ``list`` és mutable. Pot canviar el seu valor mantenint la seva
identitat.


Les llistes de Python ens ofereixen unes quantes funcions *de regal* per
modificar-les. La funció ``dir()`` ens permet veure aquestes opcions.
Comparem per un moment les funcions que ofereixen els tipus ``tuple`` i
``list``.

+-------------------------+------------------------------+-------------------------------------------------------+
|  ``dir(tuple)``         |  ``dir(list)``               |  Què permet                                           |
+=========================+==============================+=======================================================+
|  __add__                |  __add__                     |  concatenar (``+``)                                   |
+-------------------------+------------------------------+-------------------------------------------------------+
|  __contains__           |  __contains__                |  l'ús de l'operador ``in``                            |
+-------------------------+------------------------------+-------------------------------------------------------+
|                         |  __delitem__                 |  l'ús de la funció ``del()``                          |
+-------------------------+------------------------------+-------------------------------------------------------+
|  __dir__                |  __dir__                     |  l'ús de la funció ``dir()``                          |
+-------------------------+------------------------------+-------------------------------------------------------+
|  __eq__                 |  __eq__                      |  comparar (``==``)                                    |
+-------------------------+------------------------------+-------------------------------------------------------+
|  __getitem__            |  __getitem__                 |  l'accés a un element amb l'índex ``[]``              |
+-------------------------+------------------------------+-------------------------------------------------------+
|  __len__                |  __len__                     |  l'ús de la funció ``len()``                          |
+-------------------------+------------------------------+-------------------------------------------------------+
|  __mul__                |  __mul__                     |  l'ús de l'operador ``*``                             |
+-------------------------+------------------------------+-------------------------------------------------------+
|                         |  __setitem__                 |  l'ús de l'assignació ``=``                           |
+-------------------------+------------------------------+-------------------------------------------------------+
|  __str__                |  __str__                     |  conversió a ``str`` (ex. quan fem ``print()``)       |
+-------------------------+------------------------------+-------------------------------------------------------+
|                         |  append                      |  afegir un nou element                                |
+-------------------------+------------------------------+-------------------------------------------------------+
|                         |  clear                       |  eliminar el contingut                                |
+-------------------------+------------------------------+-------------------------------------------------------+
|                         |  copy                        |  duplicar *superficialment*                           |
+-------------------------+------------------------------+-------------------------------------------------------+
|  count                  |  count                       |  comptar quants elements hi ha amb un valor           |
+-------------------------+------------------------------+-------------------------------------------------------+
|                         |  extend                      |  ampliar amb els elements d'una altra seqüència       |
+-------------------------+------------------------------+-------------------------------------------------------+
|  index                  |  index                       |  trobar la primera posició en que es troba un element |
+-------------------------+------------------------------+-------------------------------------------------------+
|                         |  insert                      |  inserir un nou element a una posició                 |
+-------------------------+------------------------------+-------------------------------------------------------+
|                         |  pop                         |  extreure el darrer element                           |
+-------------------------+------------------------------+-------------------------------------------------------+
|                         |  remove                      |  eliminar la primera ocurrència d'un element          |
+-------------------------+------------------------------+-------------------------------------------------------+
|                         |  reverse                     |  donar-li la volta als elements                       |
+-------------------------+------------------------------+-------------------------------------------------------+
|                         |  sort                        |  ordenar els elements                                 |
+-------------------------+------------------------------+-------------------------------------------------------+


.. note:: He filtrat algunes per simplificar. Per suposat, tu pots revisar
          la resta i consultar perquè serveix cada entrada amb ``help()``, per
          exemple, ``>>> help(list.append)``


Exercici 37. Funcions de llistes
================================

Desenvolupa un programa que:

* creï una llista buida

* faci servir ``append()`` per afegir diferents valors a la llista.

* faci servir ``extend()`` per afegir a la llista els continguts d'una
  altra llista

* faci servir ``insert()`` per inserir a l'inici de la llista.

* faci servir ``index()`` per trobar la posició d'algun element existent a la
  llista i algun que no hi sigui.

* faci servir l'operador ``in`` per comprovar si hi ha un element a la
  llista.

* faci servir la funció ``del()`` per eliminar un element de la llista a
  partir de la seva posició

* faci servir la funció ``remove()`` per eliminar elements de la llista a
  partir del seu valor

* faci servir la funció ``pop()`` per eliminar el darrer element de la
  llista

* faci servir les funcions ``sort()`` i ``reverse()`` per canviar l'ordre
  dels elements de la llista.

