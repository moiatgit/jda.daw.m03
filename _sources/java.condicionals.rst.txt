##########
Condicions
##########

Per defecte, les instruccions d'un programa s'executen d'una en una de manera
seqüencial, des de la primera a la darrera. Donat que no sempre ens interessarà
aquest ordre, ens calen eines per controlar quines instruccions s'executen, en
quines situacions i quants cops.

En aquesta secció veurem les instruccions de flux condicionals que ens ofereix Java.

És típic trobar-se amb la necessitat de respondre d'una manera o d'una altra depenent d'alguna
condició.

if-then-else
============

L'estructura bàsica que ens ofereix Java és la instrucció ``if-then-else``. La seva estructura és
idèntica a la d'altres llenguatges basats en sintaxis C, i molt semblant a la de
Python.

.. code-block:: java

    if (condició) {
        // «bloc a executar en cas que la condició avaluï a cert»
    } else {
        // «bloc a executar en cas que la condició avaluï a fals»
    }

Algunes característiques:

* La condició apareix **sempre** entre parèntesis.

* La condició és una expressió booleana (ha de poder resoldre's com a cert o fals).

* Els blocs d'instruccions poden ser buits. Afegirem les claus només (``{}``) en
  comptes de ``pass`` que fèiem servir a Python.

* Si només és una instrucció, els blocs podrien aparèixer sense claus, encara que no és gaire recomanable.

  Per exemple, el següent codi mostra un missatge només quan l'edat correspon a
  algú major d'edat:

  .. code-block:: java

    if (edat < 18) {}   // en cas que sigui menor, no fa res
    else
        // val, sí, és vàlid sense claus, però millor posar-les!
        System.out.println("Vostè ja pot anar a la presó");

* El bloc ``else`` és opcional. Per tant, el següent fragment és vàlid sintàcticament:

  .. code-block:: java

        if (plou) {
            agafaElParaigues();
        }
        surtAlCarrer();

  El codi de l'exemple només cridarà a la funció ``agafaElParaigues()`` en cas que la variable
  booleana ``plou`` valgui cert.
  Amb independència de si plou o no, es cridarà a la funció ``surtAlCarrer()``.

* Java no ofereix una paraula clau especial pel cas que hi hagi més d'una
  condició. Si recordes, Python ens ofereix ``elif``.  Amb Java, però, podem
  emular-la de manera més o menys elegant gràcies que no calen les claus quan és
  només una instrucció. Considera l'exemple:

  .. code-block:: java

        if (plou) {
            agafaElParaigues();
        } else {
            if (faSol) {
                agafaElParasol();
            } else {
                maquillat();
            }
        }

  Aquest codi s'ha complicat una mica amb tants nivells d'indentació. Pot, però, ser reescrit per a
  aconseguir més llegibilitat segons:

  .. code-block:: java

        if (plou) {
            agafaElParaigues();
        } else if (faSol) {
            agafaElParasol();
        } else {
            maquillat();
        }

  Aquesta versió és preferible per que és més compacta i suposa una de les
  poques raons per no posar ``{}`` en un bloc ``else``.


Condicionals com a expressió
============================

La instrucció condicional **no** prové d'una expressió i, per tant, no retorna
cap valor.

Existeix, però, un operador ternari ``?:`` que sí permetria definir expressions condicionals.

Per exemple, les següents instruccions són equivalents:

.. code-block:: java

      // instrucció 1
      if (val % 2 == 0) {         // condició
          resultat = "parell";    // instrucció en cas de cert
      } else {
          resultat = "senar";     // instrucció valor en cas de fals
      }

      // instrucció 2
      resultat = ( val % 2 == 0 ? "parell" : "senar");
      //           ^ condició
      //                          ^ expressió en cas de cert
      //                                     ^ expressió en cas de fals

Recorda que en Python disposàvem de quelcom molt similar:

.. code-block:: python

      resultat = "parell" if val %2 == 0 else "senar"

.. caution::

    Hi ha desenvolupadors que troben molt *guay* l'operador ternari i comencen
    a fer-lo servir a tort i a dret. Compte! Recorda sempre que l'objectiu
    principal del teu codi (a banda de que funcioni com s'espera) és que sigui
    fàcil de llegir per un altre humà, no que sembli *cool*.




.. _condicions_switch:

switch
======

Ara ve una que no tenim en Python!

Quan el que tenim és que hem de fer una acció depenent dels valors d'una variable (normalment amb
més de dos valors), Java ens ofereix una manera de compactar. Considera el següent exemple que
converteix en paraules el dia de la setmana:

.. code-block:: java

    switch (numDiaSetmana) {
        case 0: nomDiaSetmana = "dilluns";
                break;
        case 1: nomDiaSetmana = "dimarts";
                break;
        case 2: nomDiaSetmana = "dimecres";
                break;
        case 3: nomDiaSetmana = "dijous";
                break;
        case 4: nomDiaSetmana = "divendres";
                break;
        case 5: nomDiaSetmana = "dissabte";
                break;
        case 6: nomDiaSetmana = "diumenge";
                break;
        default: nomDiaSetmana = "erroni";
    }

Cal tenir present que:

* ``switch`` no ofereix cap millora funcional que no es pugui fer amb ``if``, però quan tenim una
  comprovació de valors sobre la mateixa expressió, sovint resulta en un codi més llegible.
  Considera la versió amb ``if``:

   .. code-block:: java

        if (numDiaSetmana == 0) {
            nomDiaSetmana = "dilluns";
        } else if (numDiaSetmana == 1) {
            nomDiaSetmana = "dimarts";
        } else if (numDiaSetmana == 2) {
            nomDiaSetmana = "dimecres";
        } else if (numDiaSetmana == 3) {
            nomDiaSetmana = "dijous";
        } else if (numDiaSetmana == 4) {
            nomDiaSetmana = "divendres";
        } else if (numDiaSetmana == 5) {
            nomDiaSetmana = "dissabte";
        } else if (numDiaSetmana == 6) {
            nomDiaSetmana = "diumenge";
        } else {
            nomDiaSetmana = "erroni";
        }

* Si no posem el ``break``, en el moment que s'accepta un cas, passen tots. Considera l'exemple:

    .. code-block:: java

        switch (numDiaSetmana) {
            case 0: anims();
            case 1:
            case 2:
            case 3:
            case 4: esLaborable = true;
                    treballa();
                    break;
            case 5: compra();
            case 6: esLaborable = false;
                    descansa();
                    break;
            default: error();
        }

  Fixa't que només si és dilluns, s'executarà la funció ``anims()``. Si és un
  dia laborable, de dilluns a divendres, la variable ``esLaborable`` ho
  registrarà i s'executarà la funció ``treballa()``. És clar, si és dilluns,
  primer haurà executat ``anims()`` i després ``treballa()``. En cas de ser cap
  de setmana, ho registrarà convenientment a la variable ``esLaborable`` i,
  executarà la funció ``descansa()``. Això sí, si és dissabte, abans toca
  "comprar"!

* Ja hem vist que els Strings en Java requereixen una comparació especial (amb
  ``equals()``). Amb tot, el valor d'un ``switch`` també pot ser un String. Això
  implica que el compilador genera tot el codi necessari per fer les
  comparacions de manera adequada i sense que nosaltres ens hàgim de preocupar.

  .. code-block:: java

        String color = "blau";
        switch (color) {
            case "grana": 
                System.out.println("és un clam!");
                break;
            case "blau":
                System.out.println("Tot el camp");
                break;
            default:
                System.out.println("Tant se val d'on venim");
        }

Exercici 1. una calculadora senzilla en Java
============================================

Recordes l'exercici de la :ref:`calculadora senzilla <exercici_calculadora_senzilla_python>`?

Dons toca traduir-lo a Java!

Et copio l'especificació de l'exercici original, transformant-lo per Java:

Desenvolupa una calculadora senzilla que demani a l'usuari un primer
operand numèric, una operació entre (+ - * /) i un segon operand, i
escrigui el resultat d'aplicar l'operació als operands.

Exemple d'interacció: ::

    $ java CalculadoraSenzilla
    Primer operand?
    4
    Operador?
    +
    Segon operand?
    5
    4,00 + 5,00 = 9,00
    $ java CalculadoraSenzilla
    Primer operand?
    4
    Operador?
    /
    Segon operand?
    0
    No es pot dividir entre 0
    $ java CalculadoraSenzilla
    Primer operand?
    4
    Operador?
    ^
    Segon operand?
    3
    L'operador ^ no està disponible



Exercici 2. La guia de semàfors
===============================

Tradueix l'exercici de la 
:ref:`guia de semàfors<exercici_guia_semafors_python>` a Java.

Ara que disposes de ``switch``, no el desaprofitis!


Exercici 3. ☼ Tradueix exercicis de condicionals
================================================

Si trobes que vols fer més pràctiques amb els condicionals en Java, no et quedis
amb les ganes. Tradueix els exercicis que falten de :doc:`condicionals_juguem`.



----

*Ref. IP17.8*
