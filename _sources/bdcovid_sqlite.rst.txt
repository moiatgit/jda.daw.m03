######
SQLite
######

En aquesta secció instal·larem el nostre gestor de bases de dades
*SQLite* i ens hi connectarem.

Què és SQLite?
==============

Com indiquen a la seva `documentació oficial
<https://sqlite.org/index.html>`_ SQLite és una implementació d'un gestor
de bases de dades SQL molt lleuger i complet.

Tot i que potser no serà la nostra elecció per fer una aplicació Web amb
moltes transaccions, per aplicacions menys exigents i, sobretot, per a
aquesta introducció a la persistència amb bases de dades des de Java, en
tindrem més que suficient.

Instal·lació
============

La instal·lació no pot ser molt més fàcil si estàs treballant amb una
versió actualitzada de Debian o similar.

Comprova primer que no el tinguis ja instal·lat amb:

.. code-block:: none

    $ sqlite3 --version

Si et respon amb que no reconeix la comanda, passa a la instal·lació.

.. code-block:: none

    $ sudo apt install sqlite3
    $ sqlite3 --version
    3.27.2 2019-02-25 16:06:06 bd49a827…

Connexió
========

La connexió tampoc no ens haurà de resultar gaire més complexa.

En primer lloc, crearem una nova carpeta que anomenarem quelcom similar a
``holasqlite/`` i hi guardarem els següents fitxers:

* ``build.gradle``: el fitxer de configuració de Gradle. Ara que l'hem
  conegut, no en prescindirem d'ell, oi?

* ``Main.java``: el programa principal que contindrà la demostració de
  connexió a la base de dades.

Estructura de carpetes
----------------------

El teu nou directori acabarà presentant la següent estructura:

.. code-block:: none

    holasqlite/
    ├── build.gradle
    └── src/
        └── main/
            └── java/
                └── Main.java


build.gradle
------------

El fitxer de configuració per *gradle*:

.. literalinclude:: _recursos/dbcovid/holasqlite/build.gradle
   :linenos:
   :language: groovy
   :caption: :download:`build.gradle <_recursos/dbcovid/holasqlite/build.gradle>`

Main.java
---------

El programa principal podria ser tan simple com:

.. code-block:: java
    :linenos:

    import java.sql.*;
    public class Main {
        public static void main(String[] args) throws Exception {
            Connection conn = DriverManager.getConnection("jdbc:sqlite:test.bd");
            System.out.println("Connectat!");
            conn.close();
        }
    }

Normalment, però, voldrem gestionar una mica les excepcions que es puguin
produir. Una versió del codi força més sòlida seria:

.. literalinclude:: _recursos/dbcovid/holasqlite/Main.java
   :linenos:
   :lines: 5-
   :lineno-start: 5
   :language: java
   :caption: :download:`src/main/java/Main.java <_recursos/dbcovid/holasqlite/Main.java>`

Execució
--------

Prova d'executar-ho i si tot va bé tindràs:

.. code-block:: none

    $ gradle run

    > Task :run
    Connectat amb la base de dades test.bd

A banda, t'haurà aparegut un nou fitxer a l'arrel del teu directori del
projecte, anomenat ``test.bd``. Aquest fitxer conté les dades del la base
de dades a la que acabes d'intentar conectar-te. Bé, ara mateix no tindrà
gaire dades doncs encara no li hem afegit res. De fet, si mires la seva
mida és 0 bytes!
