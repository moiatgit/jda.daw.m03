############
Documentació
############

Llegíem a la definició de *programa* que és una seqüència
d’instruccions orientada a «bla bla bla» [#definicioprograma]_ , *més la corresponent
documentació*.

No són instruccions i no són dades. L'ordinador no en fa cas d'ella.
De fet, ocupa un cert espai extra en el suport on es guarda el codi
del programa, però la majoria dels traductors la treuen i no sol
arribar amb el codi màquina a l'ordinador. Amb tot, la documentació
és un element fonamental de la programació. Perquè?

Bàsicament perquè els programes no només els ha de llegir el
traductor.  També els ha de a llegir altres programadors, sovint el
propi autor després d'un cert temps. Com ja sabem, els llenguatges de
programació no són la manera natural amb la que ens comuniquem les
persones. A sobre, cada persona té estils de codificació molt
diferents, que fins i tot, canvien a mida que el desenvolupador
adquireix més experiència (o fins i tot la perd!) Veure el codi "nu"
de comentaris pot ser, si més no, desolador quan has de corregir un
error en una part d'un programa que no tens clar ni quin és el seu
objectiu.

D'entre les maneres de documentar els programes, probablement la més
bàsica és a partir de comentaris (en llenguatge natural) inserit entre
el codi del nostre programa.

Segurament tots els llenguatges que ens trobarem a la nostra vida
ofereixen alguna manera d'introduir comentaris. Sovint hi ha un
caràcter o combinació de caràcters que marquen l'inici (i de vegades
el final) del comentari.

Per exemple,

.. code-block:: none
    :linenos:

    /* això és un comentari vàlid en C */

    // això és un commentari vàlid en java

    # així comentaries en python


A l'hora de documentar el nostre codi, algun dels punts que tindrem en
compte són:

- cada fitxer amb codi haurà d'incloure una capçalera que indiqui,
  com a mínim, quin és l'objectiu del codi que inclou. És un "què fa"
  més que un "com ho fa".

- quan dividim el codi en parts dins d'un mateix fitxer, caldrà també
  indicar quin objectiu pretén resoldre cada part.

  Per exemple, si el nostre fitxer inclou una part de programa que
  calcula si un determinat valor és un nombre primer, i una altra part
  que calcula si un valor és múltiple d'un altre, ho indicarem amb un
  comentari per cada part.

- quan sabem que el nostre programa, o alguna part, requereix de
  certes condicions per funcionar, ho indicarem.

  Per exemple, el nostre programa només funciona amb enters
  positius i no amb negatius.

- quan som conscients que la manera que hem codificat la nostra
  solució pot ser complexa d'entendre, també farem una explicació de
  "com funciona"

- La documentació ha de correspondre amb el codi que documenta. Hem
  d'anar amb compte d'actualitzar la documentació quan modifiquem el
  codi. Una documentació que no es correspon amb el codi que
  teòricament documenta, és pitjor que cap documentació.

- no comentarem però, codi obvi. Per exemple, no té sentit escriure:

  .. code-block:: python

    a = 1   # la variable passa a contenir el valor numèric 1

  Aquest comentari és redundant. Ja es veu a partir del codi! En
  canvi, podria ser adequat en algun cas un comentari com ara:

  .. code-block:: python

    a = 1   # tornem a la primera posició vàlida

.. note: alguns llenguatges de programació disposen d'eines que permeten extreure els comentaris i
    crear a partir d'ells la documentació del codi en formats com ara HTML.

Un altre ús comú pels comentaris és el de remarcar parts que encara estan
pendents de fer. Els bons editors resaltaran comentaris que continguin la
paraula ``TODO`` (en anglès *per fer*) o simplement ``XXX``. Aquest tipus de
comentaris ha de ser eliminat un cop completats.

De vegades, alguns llenguatges fan servir els comentaris per a afegir certa informació que serà
processada per un programa. Per exemple, en Python existeix un mòdul anomenat **doctest** que permet
fer servir els comentaris per a indicar com s'ha de comportar el codi. Ho veurem més endavant.

Els comentaris entre el codi estan molt bé, però tenen les seves limitacions. 
En ser realitzats en llenguatge natural, els programadors que els llegeixen han de conèixer l'idioma
en que estan escrits.

La limitació més important, però, apareix amb com es fan servir. Sovint, els
programes són modificats per corregir errors o per adequar-los a noves necessitats. Altres vegades,
copiarem i enganxarem (el perillós *copy&paste*) parts de codi amb els comentaris, i modificarem el
codi per què realitzi
accions similars. Aquestes
modificacions solen ser realitzades amb pressió de temps. Això fa que sigui fàcil que oblidem
actualitzar els comentaris.

.. tip:: Un comentari desactualitzat o fora de lloc és pitjor que cap comentari

El programes grans basats en comentaris, si no es posa molt d'esforç, fàcilment degeneren fins el
punt que hom no pot refiar-se de cap comentari.

Una alternativa als comentaris, que també es considera documentació i que cada cop es prefereix més, es fer servir noms significatius dins del codi. Per exemple, si dins el nostre programa hem de manipular una edat, es podria assignar a una variable (o contenidor) amb qualsevol dels següents noms:

.. code-block:: python
    :linenos:

    x329485702934572349ytiroporquemetoca = 18  # No té cap relació amb edats i costaria molt de
                                               # trobar una justificació per un nom així!
    x = 18                                     # Les x es solen utilitzar per valors decimals en general
    n = 18                                     # N sol ser vàlid per naturals però no diu res de què significa
    e = 18                                     # És curt i evoca la inicial de (e)dat. Si es fa
                                               # servir només per un nombre molt reduït de línies de codi, i no
                                               # hi maneguem altres conceptes començats per (e), pot ser acceptable
    edat = 18                                  # No deixa dubte que és una edat. Si no hi ha més edats al
                                               # nostre programa, pot estar bé.
    edat_fill = 18                             # Dóna encara més informació del context, en cas que
                                               # el codi on es fa servir, hagi de manegar altres
                                               # edats (ex. edat_mare)
    variable_que_conté_l_edat_del_fill_actual  # Potser massa. Per exemple, És difícil de justificar
                                               # que calgui dir que és una variable

---

.. [#definicioprograma] Programa: seqüència d’instruccions orientada a ser executada per un ordinador sobre un conjunt de dades per donar resposta a un problema determinat, més la corresponent documentació.
