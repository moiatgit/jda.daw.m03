##########################
El bucle ``for`` revisitat
##########################

Fins ara, el bucle ``for`` que hem vist sempre tenia el següent aspecte:

.. code-block:: python

    for i in range(inici, final, increment):
        fes_alguna_cosa_amb_la_iteracio(i)

Aquesta forma del ``for`` es pot traduir molt directament a la de
llenguatges de programació basats en notació *C*, com per exemple *Java*.
No és, però, la manera més habitual de fer servir el bucle ``for`` en
Python.

En primer lloc, ``range()`` és una funció que ens retorna una seqüència de
valors entre inici i l'anterior al final, amb l'increment indicat.

Així, els següents bucles fan el mateix i, pràcticament, de la mateixa
manera:

.. code-block:: python

    for i in range(0, 5, 1):    # versió clàssica
        print(i)

    for i in range(0, 5):       # si no indiquem increment, considera 1
        print(i)

    for i in range(5):          # si no indiquem l'inici, considera 0
        print(i)

    for i in [0, 1, 2, 3, 4]:   # funciona amb la llista explícita dels valors
        print(i)

Quan hem hagut de fer servir la variable de recorregut ``i`` per a accedir
a la posició d'una seqüència (incloent strings, és clar), el que hem fet
fins ara és aconseguir que la ``i`` vagi agafant cada valor de la llista
d'indexos (posicions) que ens interessa, i amb ``[i]`` hem accedit al
valor concret.  Però no té perquè ser així. Els següents bucles fan el
mateix:

.. code-block:: python

    text = 'retrobem el for!'
    for i in range(len(text)):
        lletra = text[i]
        print(lletra)

    for lletra in text:
        print(lletra)

Aquesta segona manera, no només és més compacta, sinó que en moltes
implementacions de Python serà executada de manera més eficient.

Aquest comportament no és únic del ``for`` de Python. Altres llenguatges
l'incorporen, sovint donant-li un nom especial. Per exemple ``foreach`` o
*enhanced for* (``for`` millorat) Per Python, el ``for`` sempre està
*millorat*!

Què passa sí necessitem el valor i també la posició? Python ens ofereix
``enumerate()``, una funció que ens retorna parelles (tuples) amb posició,
valor. Considera els següents bucles que fan el mateix:

.. code-block:: python

    notes = [1, 2, 3]

    for i in range(len(notes)):
        print(f"La nota de la posició {i} és {notes[i]}")

    for (i, nota) in enumerate(notes):
        print(f"La nota de la posició {i} és {nota}")

    for i, nota in enumerate(notes):
        print(f"La nota de la posició {i} és {nota}")

.. note::

    Fixa't que la segona i la tercera són en realitat la mateixa versió.
    Python ens deixa eliminar els parèntesis de les tuples en diferents
    situacions.

    Això permet fer aquest tipus de coses:

    .. code-block:: python

        print(a, b)     # 5 3
        a, b = b, a
        print(a, b)     # 3 5


Si el que volem, però, és fer un recorregut invertit (del final a l'inici
de la seqüència), ens cal primer donar-li la volta. Ho tenim fàcil amb la
funció ``reversed()``

.. code-block:: python

    for lletra in reversed(text):
        print(lletra)

Exercici 38. Un triangle de lletres (revisitat)
===============================================

Torna a considerar 
:ref:`exercici_triangle_lletres`

Aquest cop aplica els teus nous coneixements de recorreguts amb el bucle
``for`` per resoldre'l


Exercici 39. Un triangle de lletres invertit (revisitat)
========================================================

Torna a considerar 
:ref:`exercici_triangle_lletres_invertit`

Aquest cop aplica els teus nous coneixements de recorreguts amb el bucle
``for`` per resoldre'l
