###########
Definicions
###########

En aquesta secció es presenten algunes definicions de conceptes que farem servir
a partir d'ara.

Definicions
===========

* **mòdul**: agrupació de codi dins d'un nom

* **paràmetre**: cadascuna de les variables que apareixen entre parèntesis en la definició d'un mòdul.

* **argument**: cadascun dels valors que apareixen entre parèntesis en la crida a un mòdul.

* **procediment**: mòdul, amb zero o més paràmetres, que no retorna cap valor.

  En Python és més precís dir que retorna el valor ``None``.

* **funció**: mòdul, amb zero o més paràmetres, que retorna un valor

* **crida**: punt d'activació o execució d'un mòdul.

  En el cas d'un procediment, la crida es realitza en forma d'instrucció, sense recollir el valor
  resultant (``None`` en Python)

  En el cas d'una funció, la crida es realitza dins d'una expressió en la que es recull el valor
  resultant.

* **funcions pures**: aquelles que la seva execució, a partir dels mateixos arguments, sempre donarà
  el mateix resultat i no té efectes secundaris.

  Exemple:

  .. code-block:: python

        def quadrat(num):
            """ retorna el quadrat del nombre enter num
                >>> quadrat(0)
                0
                >>> quadrat(1)
                1
                >>> quadrat(2)
                4
            """
            return num ** 2

        ant = quadrat(5)
        while ant == quadrat(5):
            print("Sembla que quadrat(5) ha tornat a retornat el mateix!")
        print("Aquest missatge no s'escriurà mai")

* **funcions impures**: aquelles per les que successives execucions amb els
  mateixos arguments poden donar lloc a resultats diferents o/i tenir efectes
  secundaris.

  Per exemple, la funció ``input()`` retornarà un nou valor cada cop que
  sigui cridada. Fins i tot si el valor retornat és el mateix, de l'entrada
  estàndard s'haurà extret un element diferent.

* **àmbit d'una variable**: espai dins d'un programa en que la variable pot ser
  accedida.

  L'àmbit d'una variable comença a partir del moment en que es declara i
  finalitza quan es tanca el bloc de codi on està definida.

  Per exemple, considera el següent codi en Python:

  .. code-block:: python
      :linenos:

      la_meva_variable_global = 1
      def el_meu_modul(el_meu_parametre):
          la_meva_variable_local = 10 + la_meva_variable_global
          return la_meva_variable_local + el_meu_parametre

      def main():
          resultat = el_meu_modul(la_meva_variable_global * 100)
          print(resultat)    # escriu 111

* **variable global**: És diu que una variable és *global* respecte un mòdul
  quan ha estat definida fora del mòdul però és visible dins del mòdul.

  Exemple

  .. code-block:: python

        variable_global = 5

        def foo():
            print(f"des de foo() el valor de variable_global és {variable_global}")

        print(f"des de fora de foo() el valor de variable_global és {variable_global}")

  A l'exemple, ``variable_global`` pot ser accedida tant dins com fora del cos
  de ``foo()``. El seu *àmbit* és tot el codi mostrat, a partir del moment en
  que és inicialitzada.

.. note:: Cal tenir present que, a Python, ``variable_global`` pot ser
   consultada des de ``foo()`` però no pot ser modificada. És tracta d'una
   particularitat de Python en la que no entrarem. Si tens curiositat, cerca la
   paraula reservada ``global`` i, si en tens *molta* de curiositat, el concepte de
   *clousure*.

* **variable local**: Es diu que una variable és *local* respecte un mòdul quan
  està definida dins del mòdul i, per tant, no té visibilitat fora d'aquest.

  .. code-block:: python

        def foo():
            variable_local = 5
            print(f"des de foo() el valor de variable_local és {variable_local}")

        print(f"des de fora de foo() intentar consultar el valor de {variable_local}i dóna error!")

  La variable ``variable_local`` està definida dins del mòdul ``foo()`` i
  *només* pot ser accedida dins del bloc del mòdul.  El ``print()`` que apareix
  fora del cos de ``foo()`` generarà l'error d'execució ``NameError: name
  'variable_local' is not defined``.

* **temps de vida d'una variable**: temps en que es manté l'espai de memòria
  assignat a una variable. Normalment podrem considerar que una variable roman
  viva fins la darrera vegada que sigui accedida, o, per simplicitat, mentre el
  seu àmbit estigui en execució.

  Per cert, els mòduls també tenen un àmbit. De moment només veurem mòduls
  globals, però molts llenguatges permeten definir mòduls dins de mòduls. Python
  i Java en són dos exemples.

* **ocultació**: Quan definim en un àmbit local una variable amb el mateix nom
  que una global, es produeix un fenomen anomenat *ocultació* o *overriding*.

  .. code-block:: python

      >>> variable = 1
      >>> def foo():
      ...    variable = 2
      ...    print(variable)
      ...
      >>> print(variable)
      1
      >>> foo()
      2
      >>> print(variable)
      1

  Fixa't com

  * ``variable`` és global pel mòdul ``foo()``

  * ``foo()`` defineix la seva pròpia variable local també anomenada ``variable``

  * per ``foo()`` la variable ``variable`` és la local (la que té assignat el ``2``)

  * fora de ``foo()`` la variable ``variable`` és la global (l'assignada a ``1``)

  El fenomen d'ocultació no es limita a les variables; també pot passar amb
  mòduls i altres definicions. A banda, alguns llenguatges permeten fer
  referència a variables ocultades. Tornarem a reprendre aquest tema més
  endavant.


* **Signatura d’un mòdul**: Anomenem signatura d’una subrutina a la descripció
  de la subrutina amb els paràmetres i el valor de sortida (en cas de funció)

  En Python, malgrat no es solen explicitar els tipus, és típic fer servir la
  següent notació:

  .. code-block:: python

      paraula_incorrecta(paraula:str) -> bool
      dibuixa_linia(str, int, int) -> int
      dibuixa_linies(paraula:str, amplada:int)
      main()

  Fixa't que:

  * no hem indicat el nom dels paràmetres en alguns dels mòduls

    El nom dels paràmetres no canvia la signatura però ofereix una bona descripció de què contindrà

  * quan és un procediment no indiquem valor de retorn

  La signatura del mòdul l'identifica respecte la resta de mòduls del seu mateix àmbit.

Exercici 3. Un exemple per cada definició
=========================================

Proposa un exemple de codi per cadascuna de les definicions d'aquesta secció.

**Atenció**: No facis servir els mateixos exemples que hi apareixen o que es van
donar a classe.  Sigues original!

