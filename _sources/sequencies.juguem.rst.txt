#############################
Pràctiquem amb les seqüències
#############################

A continuació et proposo uns quants exercicis amb seqüències. Desenvolupant-los tots
tindràs, no només una bona pràctica sinó que també et permetrà recopilar una bona quantitat de
funcions que et seran útils per desenvolupar l'exercici més gros que t'he proposat fins ara
:doc:`sequencies.el_penjat`.



Pràctica 1. Mostra una seqüència de notes en maco
=================================================

Desenvolupa una funció que composi un string a partir d'una seqüència
d'enters de manera llegible.

Considera els *doctest*

.. code-block:: Python

    >>> sequencia_maca((1, 2, 3))
    '1, 2 i 3'
    >>> sequencia_maca((1,))
    '1'
    >>> sequencia_maca(())
    'cap'

**Pista**: quan hi ha un únic element has d'assegurar-te que el retornes en forma de string.


Pràctica 2. Conversor de string a tupla de lletres
==================================================

Desenvolupa una funció que converteixi un string a una seqüència de lletres
(caracters)

.. code-block:: Python

    >>> string2tuple('hola')
    ('h', 'o', 'l', 'a')
    >>> string2tuple('')
    ()

Pràctica 3. Conversor de tuples de lletres a string
===================================================

Desenvolupa una funció que converteixi una tupla de lletres a string.

La tupla pot contenir tant lletres com codis de lletres (recorda les
funcions ``ord()`` i ``chr()``)

.. code-block:: Python

    >>> tuple2str(('h', 111, 'l', 97))
    'hola'
    >>> tuple2str(())
    ''

Pràctica 4. Afegir entrada a tupla si no hi és
==============================================

Desenvolupa una funció que rebi una tupla i un valor, i que crei una nova tupla
a partir de la tupla rebuda, més el valor en cas que aquest no hi fos.

.. code-block:: Python

    >>> afegeix_si_no_hi_es((4, 3, 6), 3)
    (4, 3, 6)
    >>> afegeix_si_no_hi_es((4, 3, 6), 5)
    (4, 3, 6, 5)


Pràctica 5. Manteniment de notes
================================

Desenvolupa un programa que ofereixi un entorn operatiu pel manteniment de les notes d'una classe.

Les opcions que admetrà són:

* 'ajuda': mostra les opcions disponibles

* 'afegeix n': afegeix el nombre n al final de la seqüència de notes

* 'mostra': mostra la seqüència de notes

* 'surt': finalitza i surt

Per facilitar la visualització, el programa oferirà el *prompt* ``>``

Una simulació d'execució seria:

.. code-block:: none
    :linenos:
    :emphasize-lines: 3

    $ python3 mantenimentnotes.py
    Manteniment de notes ('ajuda' per obtenir ajuda)
    > ajuda
    Les opcions disponibles són:
    * ajuda:  mostra aquesta ajuda
    * afegeix n: afegeix el nombre enter positiu n al final de la seqüència de notes
    * mostra: mostra la seqüència de notes
    * surt: finalitza i surt
    > mostra
    cap
    > afegeix 5
    fet
    > mostra
    5
    > afegeix 4
    fet
    > afegeix dos
    no és un enter positiu
    > mostra
    5 i 4
    > comanda inventada
    no t'entenc
    > surt
    adéu

*Nota*: recorda que ja tens una manera de mostrar maca una seqüència!

Pràctica 6. El manteniment de notes ampliat
===========================================

Amplia el programa de manteniment de notes amb la possibilitat de demanar la nota mitja, la màxima,
la mínima i quantes notes en portem.

No oblidis ampliar també l'ajut!

Una simulació:

.. code-block:: none

    $ python3 mantenimentnotes.py
    Manteniment de notes ('ajuda' per obtenir ajuda)
    > afegeix 5
    > afegeix 4
    > afegeix 10
    > màxima?
    10
    > mínima?
    4
    > quantes?
    3
    > surt
    adéu

Pràctica 7. Manteniment de notes amb cercador
=============================================

Aquesta nova versió del manteniment de notes, ofereix la possibilitat de cercar una determinada
nota.

La nova comanda és ``cerca n``

La funció que desenvoluparà aquesta nova funcionalitat passarà els següents doctest:

.. code-block:: Python

    >>> cerca_nota((1, 2, 3, 2, 3, 4, 3, 5, 3), 10)
    'No hi ha cap nota amb valor 10'
    >>> cerca_nota((1, 2, 3, 2, 3, 4, 3, 5, 3), 5)
    'Hi ha 1 nota amb valor 5 a la posició 7'
    >>> cerca_nota((1, 2, 3, 2, 3, 4, 3, 5, 3), 3)
    'Hi ha 4 notes amb valor 3 a les posicions 2, 4 i 6'

Si ``n`` no correspon a un enter positiu, el programa respondrà com a la comanda ``afegeix n``.


Pràctica 8. Insereix en ordre
=============================

Desenvolupa una funció que rebi un valor enter i una tupla d'enters
ordenats creixentment, i
retorni una tupla amb els valors de la tupla rebuda, més el nou enter.
La tupla retornada també estarà ordenada.

Si el valor ja estava a la tupla original, la retornada el tindrà
repetit.


.. code-block:: Python

    >>> insereix_ordenat(5, (4, 6))
    (4, 5, 6)
    >>> insereix_ordenat(5, ())
    (5, )
    >>> insereix_ordenat(5, (6, 7, 8))
    (5, 6, 7, 8)
    >>> insereix_ordenat(5, [1, 2, 3, 4[)
    (1, 2, 3, 4, 5)
    >>> insereix_ordenat(5, (4, 5, 6))
    (4, 5, 5, 6)

Pràctica 9. Ordena notes de manera incremental
==============================================

Desenvolupa un programa que vagi demanant nombres enters (poden ser
negatius), fins que rebi *prou*. En acabar, el programa mostrarà els
valors introduïts ordenats de manera creixent.

.. code-block:: none

    $ python3 notesordenades.py
    Introdueix les notes (prou per finalitzar)
    4
    De moment: 4
    6
    De moment: 4 i 6
    3
    De moment: 3, 4 i 6
    9
    De moment: 3, 4, 6 i 9
    5
    De moment: 3, 4, 5, 6 i 9
    5
    De moment: 3, 4, 5, 5, 6 i 9
    prou
    Final: 3, 4, 5, 5, 6 i 9


Pràctica 10. Elimina repetits
=============================

Desenvolupa una funció que rebi una tupla i retorni una altra
valors repetits, conservant l'ordre relatiu dels elements.

.. code-block:: Python

    >>> elimina_repetits((4, 5, 4, 2))
    (4, 5, 2)
    >>> elimina_repetits((1, 4, 2, 1, 4, 1, 4, 2, 3))
    (1, 4, 2, 3)
    >>> elimina_repetits((1, 2, 3))
    (1, 2, 3)
    >>> elimina_repetits(())
    ()

Pràctica 11. Suma de seqüències
===============================

Desenvolupa una funció que rebi dues tuples d'enters i retorni una tupla amb la suma.

.. code-block:: Python

    >>> suma_sequencies((1, 2, 3), (4, 5, 6))
    (5, 7, 9)
    >>> suma_sequencies((1, 2), (4, 5, 6))
    (5, 7, 6)
    >>> suma_sequencies((1, 2, 3), (4, 5))
    (5, 7, 3)


Pràctica 12. Parells alumnes i notes
====================================

Desenvolupa una funció que rebi una tupla amb notes i una altra amb alumnes i retorni una tupla
amb parells alumne, nota.

.. code-block:: Python

    >>> parells_alumne_nota(('Marta', 'Lin', 'Enrique'), (6, 9, 7))
    (('Marta', 6), ('Lin', 9), ('Enrique', 7))

Pràctica 13. Alumnes i notes separats
=====================================

Desenvolupa una funció que rebi una tupla amb parells alumne i nota, i retorni una tupla amb dues
tuples, la primera amb els alumnes i la segona amb les notes.

.. code-block:: Python

    >>> separa_alumnes_i_notes((('Marta', 6), ('Lin', 9), ('Enrique', 7)))
    (('Marta', 'Lin', 'Enrique'), (6, 9, 7))

----

*Ref. IP15.3*
