##################
Agrupació de dades
##################

A la secció anterior ens vam quedar amb la idea de que ens calia agrupar
diferents conceptes d'un resultat d'alguna manera.

Agrupant dades en C
===================

Els llenguatges de programació imperatius no orientats a objectes, resolen
aquest problema de diferents maneres. Per exemple, el llenguatge C fa
servir *struct*

.. literalinclude:: _code/notesestudiantV04.c
   :language: c
   :linenos:

**nota**: Una manera d'executar aquest codi seria guardant-lo al fitxer
``exemple.c`` i executant:

.. code-block:: none

    $ gcc exemple.c && ./a.out

Per no complicar massa l'exemple, he optat per canviar
``composaResultat()`` a procediment en comptes de funció.

A les línies 5 a 8, definim un nou tipus anomenat ``Resultat`` que es
compsa de dos *camps*, un string on emmagatzemar el nom de l'estudiant i
un enter on emmagatzemar la nota.

A la línia 23 del codi anterior, declarem un ``Resultat``. És a dir,
demanem a C que ens creï una instància de tipus ``Resultat`` i la
referenciem amb la variable ``resultat``.

A les línies 26 i 27, *inicialitzem* els diferents *camps* de que es
composa un ``Resultat`` i, finalment, a la línia 32 passem els valors *en
bloc* al procediment ``mostraResultat()``.

Fixa't que ara seria fàcil afegir nous *camps* a un resultat, com ara el nom i cognoms de
l'estudiant per separat, el nom i el codi de la UF, etc.

.. code-block:: c

    typedef struct {
        char nomEstudiant[50];
        char cognomEstudiant[50];
        char nomUF[100];
        char codiUF[5];
        int nota;
    } Resultat;

Sembla que en C hem resolt el problema de l'ampliabilitat, no? Veiem-ho en
un altre llenguatge.

Una possible solució en Python
==============================

Python ens ofereix múltiples maneres de resoldre aquest problema.

Una manera molt simple d'agrupar el resultat d'un estudiant seria
simplement fer servir una tupla on el primer element sigui el nom de
l'estudiant i el segon la nota.

.. code-block:: python

    resultat = ("Laia Sánchez d'Àrgent", 6)

Per aquest exemple, però, considerarem un altre tipus de tuples: les *namedtuple*.

Es tracta d'una varietat de tupla que, en comptes d'indexar els valors per
posició, ho fa amb un nom.

El problema anterior el podríem traduir de la següent manera:

.. literalinclude:: _code/notesestudiantV04.py
   :language: python
   :linenos:


A diferència de C, a Python, tant la creació de la nova
instància i la inicialització, la realitzem en la mateixa línia (la 15).

De la mateixa manera que a la versió en C, al codi de Python els dos
valors de que es composa el resultat es passen agrupats al procediment
que composa el resultat.

A l'igual que amb ``struct`` de C, el ``namedtuple`` de Python és fàcilment ampliable:

.. code-block:: python

    Resultat = namedtuple('Resultat', 'nom_estudiant cognom_estudiant nom_UF codi_UF nota')

El llenguatge Java ofereix un altre mecanisme —les classes— que, com veurem de
seguida, és molt més que una simple agrupació de dades.


Exercici 3. ☼ L'estructura Persona en C
=======================================

Implementa l'estructura d'una persona (amb nom, cognoms i edat) en llenguatge C.

Inclou el codi del mòdul ``composaFitxa()`` que rebi una instància de
l'estructura creada i composi el missatge com a
:ref:`exercici_fitxa_persona`.

Exercici 4. ☼ L'estructura Persona en Python
============================================

Implementa l'estructura d'una persona (amb nom, cognoms i edat) en Python. Fes
servir ``namedtuple``.

Inclou el codi del mòdul ``composa_fitxa()`` que rebi una instància de
l'estructura creada i composi el missatge com a
:ref:`exercici_fitxa_persona`.
