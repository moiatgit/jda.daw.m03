###########
Expressions
###########

**Expressió**: Conjunt de dades i operadors relacionats entre sí que expressen un valor.

**Expressió algorísmica**: expressió definida de forma que es pot incloure en un algorisme.

    Per exemple, no és fàcil escriure el símbol ``≤`` així que
    l'expressió algorismica corresponent és ``<=``

**Precedència dels operadors**: quan apareix més d'un operador a una expressió, la precedència indica l'ordre en que s'ha de realitzar les operacions. Per a evitar confusions, és recomanable fer servir els parèntesis.

Exemples d’expressions numèriques ::

    3 + 4 ▶ 7
    3 + 4 * 2 ▶ 3 + (4 * 2) ▶ 11
    -2 * 6 / 4 + 6 mod 2 – 4 ▶ ((((-2) * 6) / 4) + (6 mod 2)) – 4 ▶ -3 + 0 – 4 ▶ -7

Exemple d’expressió alfanumèrica ::

    "hello" + " " + "world!" ▶ "hello world!"

Exemples d’expressions lògiques ::

    Cert and Fals ▶ Fals
    Fals xor Cert ▶ Cert
    a and not b or c and d ▶ (a and (not b)) or (c and d)

Exemples d’expressions relacionals ::

    5 <= 6  ▶ Cert
    4 <> 7 ▶ Cert
    cont == cont ▶ Cert

Si entrem en l'entorn de python, podrem introduir expressions directament al
*prompt* de l'entorn. Per exemple:

.. code-block:: python

    >>> 3 + 4
    7

Les dades d'una expressió poden aparéixer:

- en forma de literal

- com el contingut d'una variable

- com el resultat d'una altra expressió entre parèntesis

- com el resultat de la crida a una funció

  Per exemple:

  .. code-block:: python

     >>> len('hola')        # len() retorna la longitut del valor 'hola'
     4
     >>> len('Món!') + 1
     5

  Anirem aprenent diferents funcions i, de fet, fins i tot crearem les
  nostres! Paciència.


Juguem una mica
===============

Pràctica 1. Tipus del resultat
------------------------------

Sempre que apliquem un operador a dues dades aconseguim un resultat del mateix tipus de les dades que fan d'operand? Si penses que no, posa un exemple.

Pràctica 2. Valor d'expressions
-------------------------------

Calculeu el valor de les següents expressions:

a) 3 + 5 * 2

b) 21 mod (2^2)

c) Cert and (Fals or Cert or Cert or Fals) and (a<>a or b == b)

d) 3 – 6 mod 2 + 5 <= -4^2 + 10 / (5 – 3)

e) (a < b and b < c and c < a)

f) a and not (a or b)

g) (a + b + c == c) and a < b

h) (a <> b) and (a + b == 2 * a)

i) len('hola' + 'adéu') * len('oio')

----

*Ref. IP8.2*
