########################
Les seqüències en Python
########################

El problema anterior presenta la dificultat de requerir guardar les notes que anem rebent en algun
lloc. El problema és que no coneixem encara cap tipus de dades que ens permeti guardar una seqüència
d'enters.

Python ens ofereix diferents tipus de dades per poder agrupar dades de manera seqüencial. De moment,
ens quedarem amb una de molt versàtil: la *tupla*.

Considera la següent interacció amb la consola de Python

.. code-block:: python
    :linenos:

    >>> nombres = (1, 2, 'tres')
    >>> type(nombres)
    <class 'tuple'>
    >>> nombres[0]
    1
    >>> len(nombres)
    3
    >>> for i in range(0, len(nombres), 1):
    ...     print(type(nombres[i]))
    ... 
    <class 'int'>
    <class 'int'>
    <class 'str'>

Fixa't com:

* a la línia 1 inicialitzem la variable ``nombres`` amb tres enters separats per coma i entre
  parèntesis ``(`` i ``)``.

* el tipus de ``nombres`` és ``tuple``

* hi podem accedir als diferents valors de ``nombres`` tot indexant-los entre claudàtors ``[`` i
  ``]`` com ho fèiem amb strings. De fet, fins i tot és vàlida la funció ``len()`` per saber quants
  elements en tenim!

* com els strings, les tuples són *inmutables*, és a dir, un cop creades, no podem canviar els
  valors que contenen.

* el codi anterior mostra que fins i tot podem tenir diferents tipus de dades a una
  tupla! En aquest cas, tots són enters menys el darrer.

.. important:: En aquest tema, novament, veurem restringit l'ús de les utilitats que ens ofereix
               Python per manegar seqüències. Tot sigui per millorar les nostres habilitats de
               desenvolupament, oi?

Considera el següent codi:

.. code-block:: python
    :linenos:

    def suma_nomes_enters_positius(nombres):
        """ Donada una seqüència de strings, aquesta funció suma els valors enters
            positius que conté, i retorna el resultat

            Nota: en cas que algun valor dins de nombres no sigui string, el
            resultat és indeterminat.

            >>> suma_nomes_enters_positius(('a', '1', '-2', '3', 'això no!', 'True'))
            4
        """
        suma = 0
        for i in range(0, len(nombres), 1):
            if nombres[i].isdigit():
                suma += int(nombres[i])
        return suma

Fixa't que:

* el recorregut de la seqüència és idèntic al recorregut d'un string. A la línia 12 fem que la variable
  de recorregut ``i`` vagi de 0 fins a la longitud de la seqüència (menys un, és clar)

* l'accés a un element de la seqüència és també idèntic al d'un string. Mira la línia 13 i intenta
  distingir-la de codi similar que has fet amb strings fins ara.

Encara un altre exemple, considera el següent codi:

.. code-block:: python
    :linenos:

    def separa_parells_i_senars(valors):
        """ Donada una tupla d'enters, retorna una tupla que conté els mateixos enters
            però primer apareixen els parells i després els senars.

            >>> separa_parells_i_senars((1, 2, 3, 4, 5, 6))
            (2, 4, 6, 1, 3, 5)
        """
        parells = tuple()
        senars = ()
        for i in range(0, len(valors), 1):
            actual = valors[i]
            if actual % 2 == 1:
                senars = senars + (actual, )
            else:
                parells += (actual, )
        resultat = parells + senars
        return resultat

Fixa't com:

* el codi fa servir dues variables de tipus tupla per anar emmagatzemant els valors.

* la tupla buida es defineix simplement escrivint ``()`` però també podem fer-ho amb ``tuple()``.

  En canvi, la tupla amb un sol element, cal definir-la amb una ``,`` extra. Altrament, Python es
  pensa que és un valor entre parèntesis!

* de la manteixa manera que concatenàvem strings (amb l'operador ``+``) també ho fem amb les tuples.

* la crida al doctest conté doble parèntesis. Els externs corresponen als parèntesis per definir que
  venen els arguments de la funció; els interns serveixen per delimitar la tupla.

Pràctica 1. Suma només enters parells
=====================================

Desenvolupa una funció que rebi una seqüència de strings i retorni el resultat de sumar tots els
nombres enters positius i parells que hi apareguin.

.. code-block:: python

    >>> suma_nomes_enters_parells(('a', '1', '2', '-2', '4', '5', 'sis'))
    6

Pràctica 2. Només enters parells
================================

Desenvolupa una funció que rebi una seqüència de strings i retorni una seqüència amb només els
nombres enters positius i parells que hi apareguin.

.. code-block:: python

    >>> nomes_enters_parells(('a', '1', '2', '-2', '4', '5', 'sis'))
    (2, 4)


----

*Ref. IP15.2*
