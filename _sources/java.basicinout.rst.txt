##########################
Entrada i sortida bàsiques
##########################

En aquesta secció aprendrem a accedir als canals d'entrada i sortida estàndards
que el sistema operatiu típicament ofereix a tot procés.

Hi ha moltes possibilitats per fer aquesta comunicació. Per exemple, els nostres programes podrien
rebre les dades d'un fitxer, d'un servidor connectat a la xarxa, o d'algun dispositiu com ara un
ratolí. Per altra banda, podrien deixar els resultats en un altre fitxer, o comunicar-los a un altre
programa com ara un navegador d'Internet.

Especialment en programes més bàsics, sovint ens comuniquem amb mitjançant una pantalla i un teclat.
En començar a funcionar el nostre programa, es trobarà sovint que el teclat està connectat a un
canal anomenat *canal d'entrada estàndard*, mentre que la pantalla estarà connectada a dos canals
*canal de sortida estàndard* i *canal de sortida estàndard d'error*.

En aquesta secció veurem algunes maneres d'escriure per sortida estàndard i de llegir de l'entrada
estàndard.

.. important:: No et deixis desanimar amb la comparació amb Python. Recorda que
    el disseny dels dos llenguatges i, sovint, els seus objectius, són molt
    diferents.

Sortida estàndard
=================

La sortida estàndard, normalment dirigida cap a la pantalla del nostre equip. Podria, però, estar
*redirigida* cap algun altre lloc, com ara un fitxer. Per exemple, recordem el nostre
programa
:download:`HolaMon.java <_code/HolaMon.java>`

.. literalinclude:: _code/HolaMon.java
    :language: java
    :emphasize-lines: 6

La seva execució podria haver estat invocada de la següent manera:

.. code-block:: sh

    $ java HolaMon > sortida.txt
    $ cat sortida.txt
    Hola Món!

Així, podríem emmagatzemar el resultat del nostre programa a un fitxer.

Analitzem amb detall la instrucció ``System.out.println("Hola Món!");``

* ``System``: agrupa diferents utilitats i valors del sistema en que funciona el nostre programa

* ``out``: fa referència a la sortida estàndard. ``System`` ofereix també ``in`` per l'entrada
  estàndard i ``err`` per la sortida estàndard d'error.

* ``println()`` és el nom de la funció que estem cridant. La sortida estàndard ``out`` (i també
  ``err``) és de tipus `PrintStream
  <http://docs.oracle.com/javase/8/docs/api/java/io/PrintStream.html>`_ i ofereix, entre d'altres
  funcions, aquesta ``println()`` que escriu l'argument que se li passa (potser cap) i finalitza amb
  un salt de línia.

* ``"Hola Món!"``: és l'argument que passem a ``println()``. Serà el missatge que escriurà per
  sortida estàndard.

  ``out`` ofereix altres funcions. Per exemple, considera el següent exemple:

  .. literalinclude:: _code/HolaMonPrintAlternatius.java
     :language: java

  Fixat que ``print()`` i ``printf()`` requereixen explicitar el salt de línia.

``printf()`` és semblant a la funció ``print()`` de Python. Permet definir un
patró en forma de String amb variables (que comencen amb ``%``) que després
substituirà amb els valors que rep a continuació.  En el cas de l'exemple,
apareix ``%s`` i ``%n``, el primer indica que rebrà un valor de tipus String (el
literal ``"Hola Món!"`` mentre que el segon seria equivalent a ``\n`` però és
vàlid per més plataformes, i per tant, recomanat. A banda d'aquestes opcions,
permet indicar altres tipus de dades. Considera el següent exemple:

.. literalinclude:: _code/DemoPrintf.java
    :language: java

En executar el programa anterior, obtenim:

.. code-block:: none

    $ javac DemoPrintf.java  && java DemoPrintf
    Un enter 42 i un decimal 3.1416 concatenant
    Un enter 42 i un decimal 3,141600 fent servir printf()
    El mateix 3,141600 ara amb tres decimals 3,142

Com veus a l'exemple, podem tenir molt més control en el formatat de la nostra
sortida amb ``printf()`` que amb ``println()``.  Entre d'altres coses, ens ha
posat una coma en comptes d'un punt, per indicar els decimals. És a dir,
s'adapta a com es mostra en l'idioma en que està configurat el nostre sistema!
També ens permet fàcilment controlar el nombre de decimals que volem que es
mostrin. En aquest cas li hem demanat que apareguin 3 decimals amb ``%.3f``.

Trobaràs tot el detall sobre els elements que poden aparèixer dins del patró de
``printf()`` a la secció `Format String Syntax
<http://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax>`_.


Entrada estàndard
=================

Java no és el llenguatge més senzill a l'hora de fer programes amb entrada per
consola. Una de les maneres més fàcils és fer servir `java.util.Scanner
<http://docs.oracle.com/javase/8/docs/api/java/util/Scanner.html>`_.

Un exemple senzillet d'ús el mostra el següent programa:

.. literalinclude:: _code/DemoScanner.java
    :language: java
    :linenos:

Un cop has realitzat la declaració de la variable Scanner (línia 7), simplement has de fer
``entrada.next()`` per llegir un String o ``entrada.nextInt()`` per llegir un enter. Hi ha altres
utilitats (com ara ``nextDouble()``) per a poder llegir valors dels diferents tipus primitius.

En tot cas, cal que tinguis present que aquest ús de ``Scanner`` farà finalitzar el nostre programa
en cas que l'usuari no ens introdueixi un valor del tipus esperat. De moment, ho acceptarem però
haurem de trobar mecanismes per controlar aquest tipus de coses.

.. _exercici_calculadorabasica_java:

Exercici 1. La calculadora bàsica en Java
=========================================

Recordes l'exercici de la :ref:`calculadora bàsica
<exercici_calculadorabasica_python>` que vas fer en Python?  Doncs ara toca
fer-ho en Java.

Et recordo l'enunciat:

Desenvolupa una calculadora bàsica que demani a l'usuari dos operands i
mostri el resultat de realitzar les operacions bàsiques (+ - * /) sobre
els operands.

Exemple d'interacció:

.. code-block:: none

    $ java CalculadoraBasica
    Primer operand?
    6
    Segon operand?
    2
    6,00 + 2,00 = 8,00
    6,00 - 2,00 = 4,00
    6,00 * 2,00 = 12,00
    6,00 / 2,00 = 3,00

Pistes:

* Com que Java requereix més precisió que Python a l'hora d'indicar els tipus de
  dades, pots suposar que les dades d'entrada són *double*.

* no et preocupis si alguna operació no és vàlida pels valors introduïts.

* a l'igual que amb ``test_py.sh`` , per Java també t'ofereixo un guió que
  t'ajudi a comprovar els teus programes a partir de l'entrada/sortida.

  :download:`test_java.sh <_recursos/test_java.sh>`. El seu funcionament és molt
  similar al de ``test_py.sh``:

  .. code-block:: none

        $ bash test_java.sh nomdelprograma

  Aquest guió et permet indicar l'extensió ``.java``, ``.class`` o fins i tot
  cap extensió pel programa. A més, comprovarà que hagis compilat el teu
  programa abans de provar-lo.

  Per a aquest exercici, disposes dels :download:`jocs de prova
  <_recursos/suport17.7.1.calculadorabasicajava.tar.gz>`.

----

*Ref. 17.7*
