#################
L'herència a Java
#################

Java, com a llenguatge orientat a objectes, implementa el concepte d'herència.

En el cas concret de Java, l'herència presenta les següents característiques:

* L'especialització s'indica amb la paraula clau ``extends``.

  .. code-block:: java

     class GatRenat extends Gat {  /* ... */ }

* Java no admet herència múltiple

  Cada classe pot ser (i de fet és) només subclasse d'una única classe [#javainterfaces]_.

* A dalt de tot de la jerarquia de classes es troba la classe ``Object`` (la classe més general).

* Quan no s'indica res, en definir una classe, estén per defecte ``Object``. És a dir, és equivalent
  definir:

  .. code-block:: java

     class Gat { /* ... */ }

  que definir-ho com:

  .. code-block:: java

     class Gat extends Object { /* ... */ }

* ``Object`` aporta una sèrie de característiques a totes les classes de Java, per exemple, el
  mètode ``String toString()``. Consulta la descripció completa dels membres d'`Object
  <http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html>`_

Exercici 2. Altres mètodes heredats
===================================

Desenvolupa un programa que contingui tres classes: GatRenat, Gat i Demo, de manera que:

- GatRenat és subclasse de Gat i no defineix cap mètode

- Gat no defineix cap mètode ni explícita la seva superclasse

- Demo realitza una demostració d'alguns mètodes de la classe ``Object``.

Els mètodes que es demostraran són:

- ``String toString()``: ja el coneixem. Ens retorna una representació de la instància en forma de
  String.

- ``Class<?> getClass()``: Segurament et semblarà críptic el tipus del valor de retorn. No et
  preocupis de moment. Aquest tipus ``Class<?>`` disposa del mètode ``String toString()`` i només
  se't demana que mostris per sortida estàndard el seu valor resultant.

- ``boolean equals(Object)``: És un mètode que ja has fet servir. Com a mínim amb els Strings,
  oi?.

Com a ajut, considera el següent esquema:

.. code-block:: java

      public class Demo {
          public static void main(String[] args) {
              Gat gat = new Gat();
              GatRenat renat = new GatRenat();
              System.out.println("gat.toString(): " + gat.toString());
              System.out.println("renat.toString(): " + renat.toString());
              /* ... */
          }
      }

La sortida haurà de ser similar a la següent:

.. code-block:: none

     gat.toString(): Gat@2a139a55
     renat.toString(): GatRenat@15db9742
     gat.getClass(): class Gat
     renat.getClass(): class GatRenat
     gat.equals(gat): true
     renat.equals(renat): true
     renat.equals(gat): false
     gat.equals(renat): false

Atenció: les primeres dues línies segurament no tindran el mateix resultat en la teva sortida. De
fet, probablement no el tindràs si executes el teu programa amb diferents JRE! Cap problema.
Assegura't que la resta sí que s'assembla.


.. rubric:: Anotacions

.. [#javainterfaces] Java no ofereix herència múltiple per evitar
   certs problemes que hi apareixen quan es permet heredar de
   múltiples superclasses. Els curiosos podeu cercar el concepte del
   *Deadly Diamond of Death* per exemple a
   http://es.wikipedia.org/wiki/Problema_del_diamante

   Java ofereix, però, un altre mecanisme anomenat *interface* que
   permet heredar *contractes* o signatures de mètodes de múltiples
   fonts.

----

*Ref. 20.1.5.2*

