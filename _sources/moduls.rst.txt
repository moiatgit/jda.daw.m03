######
Mòduls
######

Considera el següent programa:

.. literalinclude:: _recursos/quadratparaula.py
    :language: python
    :linenos:

Analitza bé el codi anterior i assegura't que entens el seu funcionament.

Fixa't que els comentaris ens han permès dividir el problema en peces més petites.

El que farem ara és convertir aquestes peces més petites en quelcom ja conegut per nosaltres
**funcions**.

Considera aquesta nova versió del programa anterior:

.. literalinclude:: _recursos/quadratparaula_modular.py
    :language: python
    :linenos:


Analitza aquesta nova versió i identifica les diferències respecte l'anterior.

Fixa't que han aparegut uns quants elements precedits de la paraula reservada ``def``. Cinc en total.

Les funcions són:

* ``paraula_incorrecta()``

* ``amplada_incorrecta()``

* ``dibuixa_linies()``

* ``dibuixa_linia()``

* ``main()``

Com sabem, les funcions es defineixen en Python fent servir la paraula reservada ``def``. Per
fer-les executar, simplement escrivim el seu nom i posem entre parèntesis les dades que li calguin.

Per exemple, ``main()`` es defineix a la línia 88 i es crida a la 104 quan el valor de la
variable ``__name__`` és ``__main__``, el que vol dir que hem executat aquest programa fent servir
la comanda:

.. code-block:: none

    $ python3 quadratparaula.py

La funció ``main()`` no espera cap dada entre els parèntesis, en canvi, la funció
``dibuixa_linia()`` n'espera 3.

Una altra particularitat de ``main()`` és que no retorna cap valor. A aquest tipus de funcions li
direm **subrutines** o **procediments**.

Els procediments generalment es criden com una instrucció i, en Python, retornen el valor especial ``None``.

.. code-block:: python

    >>> print("hola")
    hola
    >>> valor_retornat = print("hola")
    hola
    >>> valor_retornat
    >>> print(valor_retornat)
    None

Quan la funció sí retorna un valor (per exemple ``paraula_incorrecta()`` retorna un booleà) se li
diu simplement **funció**.

Tot i que Python no distingeix entre procediments i funcions que retornen valors, conceptualment sí
que hi ha una diferència. Per aquesta raó, sovint es fa servir la paraula **mòdul** per parlar tant
de procediments com de funcions que retornen valors.

Fixa't que, un cop definit un mòdul, el pots fer servir dins de la definició d'un altre mòdul.

Donat que les funcions es criden dins d'expressions, és possible que l'argument que rebin siguin el resultat de la crida a una altra funció. Això ho hem vist ja algun cop.

.. code-block:: python

    >>> print('El major és ' + str(max(int(input('primer?\n')), int(input('segon?\n')))))
    primer?
    4
    segon?
    6
    El major és 6

Fixa't en aquest, potser una mica enrevessat, exemple:

* ``print()`` és un procediment que rep un string format com a resultat de l'expressió que té entre els parèntesis de la crida.

* L'expressió té dos strings concatenats amb l'operador ``+``. El primer és el
  literal ``'El major és '`` i el segon es composa a partir d'una nova
  expressió.

* aquesta expressió es composa d'una crida a la funció ``str()``. Aquesta funció converteix a string el que rep com a argument. Una nova expressió.

* el que rep ``str()`` és el resultat d'executar la funció ``max()`` ,que rep dos valors separats per coma.

* el primer valor que rep ``max()`` és el resultat de cridar a la funció ``int()``

* la funció ``int()`` rep el resultat de cridar la funció ``input()``

* la funció ``input()`` rep un string que mostrarà per sortida estàndard i retorna el valor que llegeixi de l'entrada estàndard

* un cop el primer ``input()`` retorna el valor llegit de l'entrada estàndard, ``int()`` el converteix a enter. Tot seguit, el segon ``input()`` és cridat per a poder oferir el valor al segon ``int()``. 

* Un cop totes dues crides a ``int()`` han retornat els seus valors convertits a enters, la funció ``max()`` és cridada amb aquests enters i pot retornar el seu resultat.

* El resultat de ``max()`` és recollit per ``str()`` que el retorna convertit a string.

* L'operador ``+`` disposa, per fi, dels dos strings per concatenar i retorna la composició total

* Ara ``print()`` pot, finalment, escriure el string resultant per sortida estàndard.

Definicions
===========

A partir d'ara, doncs, farem servir els següents conceptes:

* **mòdul**: agrupació de codi dins d'un nom seguit de zero o més paràmetres.

* **paràmetre**: cadascuna de les variables que apareixen entre parèntesis en la definició d'un mòdul.

* **argument**: cadascun dels valors que apareixen entre parèntesis en la crida a un mòdul.

* **procediment**: mòdul que no retorna cap valor.

  En Python és més precís dir que retorna el valor ``None``.

* **funció**: mòdul que retorna un valor

* **crida**: punt d'activació o execució d'un mòdul.

  En el cas d'un procediment, la crida es realitza en forma d'instrucció, sense recollir el valor
  resultant, que seria ``None``.

  En el cas d'una funció, la crida es realitza dins d'una expressió en la que es recull el valor
  resultant.

Les funcions es poden classificar en:

* **funcions pures**: aquelles que la seva execució, a partir dels mateixos arguments, sempre donarà
  el mateix resultat i no té efectes secundaris.

* **funcions impures**: aquelles per les que successives execucions amb els mateixos arguments poden
  donar lloc a resultats diferents o/i tenir efectes secundaris.

Per exemple, ``amplada_incorrecta()`` sempre retornarà el mateix quan sigui cridada amb el valor
``'5'`` i, per molts cops que la cridem, no modificarà res. En canvi, la funció
``dibuixa_linies()``, cada cop que és cridada pot canviar el valor resultant i, a més, té l'efecte
secundari que apareix un nou text per la sortida estàndard.


Pràctica 1. Classifiquem
========================

Classifica els següents mòduls segons: *procediment*, *funció pura*, *funció impura*:

* ``int()``

* ``main()`` de l'exemple de ``quadratparaula.py``

* ``print()``

* ``input()``

* ``dibuixa_linia()`` de l'exemple de ``quadratparaula.py``

* ``str()``


Pràctica 2. Triangles (revisitat)
=================================

Recordes la pràctica *Trangles* de la secció
:doc:`recorreguts.numerics.python`? Doncs toca tornar-la a fer.  Aquesta nova
versió tindrà pràcticament la mateixa funcionalitat que l'anterior, però estarà
codificada fent servir mòduls.

Reescrivim l'enunciat per la teva comoditat. Fixa't que afegeix una nova
simulació per explicitar què ha de fer el programa en cas que el nombre rebut
no sigui adequat.

Desenvolupa un programa que demani un nombre enter positiu i dibuixi tants
triangles com se li indiqui.

.. code-block:: none

        $ python3 triangles.py
        quants?
        2
        .........9.........
        ........898........
        .......78987.......
        ......6789876......
        .....567898765.....
        ....45678987654....
        ...3456789876543...
        ..234567898765432..
        .12345678987654321.
        0123456789876543210
        .........9.........
        ........898........
        .......78987.......
        ......6789876......
        .....567898765.....
        ....45678987654....
        ...3456789876543...
        ..234567898765432..
        .12345678987654321.
        0123456789876543210
        $ python3 triangles.py
        quants?
        0
        Ha de ser un enter major que 0

**Pista**: considera crear un mòdul per les següents parts:

* validació de l'entrada

* dibuixar els triangles

* dibuixar les línies

* dibuixar els punts d'una línia (els esquerres i els drets?)

* dibuixar els valors creixents fins el 9

* dibuixar els valors decreixents des del 8

* el mòdul principal ``main()``



----

*Ref. IP13.1*
