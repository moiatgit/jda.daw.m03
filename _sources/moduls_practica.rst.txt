#################
Juguem amb mòduls
#################

A continuació et presento alguns exercicis a realitzar de manera modular.

Es mantenen les restriccions habituals:

* ``in`` sempre seguit de ``range()``

* ``range(ini, fin, incr)``

* ``[v]`` mai ``[a:b]`` o ``[a:b:c]``

* ús de les funcions de strings restringuit a les vistes a l'exercici
  :ref:`exercici_funcions_strings`.

En aquests exercics podràs reaprofitar el codi de moltes funcions ja
desenvolupades. De moment, la manera de reaprofitar-les serà copiant el
codi dins del fitxer corresponent. Ja veurem maneres millors.

Exercici 4. ☞ Una part d'un string
==================================

Desenvolupa una funció que, donat un string i dos enters, retorni les lletres a
partir de la indicada pel primer enter i de la longitud indicada pel segon.

.. code-block:: python

    >>> substring('Anastàsia', 1, 3)
    'na'
    >>> substring('Anastàsia', 0, 3)
    'Ana'
    >>> substring('Anastàsia', -1, 3)   # comença pel primer possible
    'Ana'
    >>> substring('Anastàsia', 6, 14)   # finalitza fins el darrer possible
    'sia'
    >>> substring('Anastàsia', 12, 3)   # si es passa de longitud, retorna buit
    ''
    >>> substring('Anastàsia', 3, 0)
    ''


Exercici 5. ☞ Una matrícula vàlida (revisitat)
==============================================

Recordes la pràctica *Una matrícula vàlida* de :doc:`strings.posicions`?

El nou enunciat queda de la següent manera:

Desenvolupa una funció amb la següent signatura ``matricula_valida(str) ->
boolean`` que retorni True si el paràmetre que rep correspon a una
matrícula vàlida segons el format instaurat a partir de l'any 2000 a
Espanya.

Una matrícula vàlida està formada per quatre xifres seguides de tres
lletres en majúscules de l'alfabet espanyol, excepte les vocals 'A', 'E',
'I', 'O', 'U' i les consonants 'Ñ' i 'Q'.

T'ofereixo alguns *doctest* per provar, però potser en voldràs afegir-ne
alguns altres:

.. code-block:: python

    >>> matricula_valida('1234BCD')
    True
    >>> matricula_valida('1234bcd')
    False
    >>> matricula_valida('1234ABC')
    False
    >>> matricula_valida('B1234UU')
    False
    >>> matricula_valida('01234ABC')
    False
    >>> matricula_valida('123BCDF')
    False

Si bé, funcionalment aquesta nova versió no presenta gaire canvis respecte
l'anterior (bàsicament el valor de retorn), tens alguns requisits
addicionals:

* fes servir els conceptes de recorreguts de strings estudiats a
  :doc:`strings.recorreguts`.

* crea dos nous mòduls ``part_numerica_valida(str) -> boolean`` i
  ``part_alfanumerica_valida(str) -> boolean`` que se n'encarreguin de fer
  les comprovacions de cada banda, tot suposant que el valor que reben és
  de la longitud adequada.

  Per fer-ho, fes servir la teva funció ``substring()`` que has definit
  a un exercici anterior.

* afegeix *doctest* adequats als mòduls ``part_numerica_valida()`` i
  ``part_alfanumerica_valida()`` que permetin comprovar el seu
  funcionament.

Els criteris d'acceptació d'aquest exercici són:

* el programa passa les proves d'entrada/sortida que trobaràs al repositori

* el mòdul ``matricula_valida()`` fa servir els dos mòduls indicats, més el
  mòdul ``substring()`` de l'exercici anterior.

* tots els mòduls definits disposen dels seus *doctest*

.. _exercici_informe_capicuitat_python:

Exercici 6. ☞ Informe de "capicuïtat"
=====================================

Recordem l'exercici :ref:`exercici_informes_capicuitat`.

Desenvolupa un procediment que, donat un string escrigui per sortida
estàndard un informe segons si conté o no capicues en els seus components.

.. code-block:: python

    >>> capicuitat('1234BCB')
    Capicua de lletres
    >>> capicuitat('1221BCD')
    Capicua de números
    >>> capicuitat('1221ABC')
    Matrícula no vàlida
    >>> capicuitat('1221BCB')
    Capicua de lletres i números
    >>> capicuitat('1234BCD')
    Matrícula avorrida


El programa farà servir les funcions ``matricula_capicua_numerica()`` i
``matricula_capicua_alfanumerica()`` que respectaran els següents *doctest*:

.. code-block:: python

    >>> matricula_capicua_alfanumerica('1234BCB')
    True
    >>> matricula_capicua_alfanumerica('1234BCD')
    False
    >>> matricula_capicua_alfanumerica('1234BAB')   # no és matrícula vàlida!
    False
    >>> matricula_capicua_numerica('1221BCD')
    True
    >>> matricula_capicua_numerica('1212BCD')
    False
    >>> matricula_capicua_numerica('1221ABC')   # no és matrícula vàlida!
    False

Els criteris d'acceptació d'aquest exercici són:

* el programa passa les proves d'entrada/sortida que trobaràs al repositori

* el mòdul ``capicuitat()`` fa servir els altres mòduls (incloent els
  d'exercicis previs)

