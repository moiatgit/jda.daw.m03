#######
Llistes
#######

Hem vist que amb els *arrays* de Java podem guardar dades seqüencials de manera
molt còmoda.

Què passa però quan hem hagut d'ampliar l'array? Doncs que hem hagut de crear-ne
un altre i copiar el contingut de l'original abans d'ampliar-ho.

Allò que amb Python fèiem tan còmodament sumant dues tuples, Java ens obliga a
explicitar-ho.

Considera la versió en Python amb tuples:

.. code-block:: python

        >>> paraules = ('em', 'falta', 'un')
        >>> noves_paraules = paraules + ('element', )
        >>> noves_paraules
        ('em', 'falta', 'un', 'element')

Amb ``list`` de Python, encara és més fàcil:

.. code-block:: python

        >>> paraules = ['em', 'falta', 'un']
        >>> paraules.append('element')
        >>> paraules
        ['em', 'falta', 'un', 'element']

Amb Java, una funcionalitat similar amb arrays, requeriria quelcom similar a:

.. code-block: java

    String[] paraules = new String[] {"em", "falta", "un"};
    String[] novesParaules = new String[paraules.length + 1];
    //                                                  ^ li afegim un espai més!
    for(int i=0; i < paraules.length; i++) {
        novesParaules[i] = paraules[i];
    }
    novesParaules[paraules.length] = "element";

Per sort, el Java disposa d'altres maneres de representar seqüències. Una
de prou versàtil és ``ArrayList``. Considera el següent exemple:

.. code-block:: java
    :linenos:

    ArrayList<String> paraules = new ArrayList<String>();
    System.out.println(paraules.size());    // ==> 0
    paraules.add("em");
    paraules.add("falten");
    paraules.add("un");
    paraules.add("element");
    System.out.println(paraules.size());    // ==> 4
    System.out.println(paraules.get(0));    // ==> em
    paraules.set(1, "falta");
    for(String paraula: paraules) {
       System.out.print(paraula + " ");
    }                                       // ==> em falta un element

A tenir en compte:

* Per poder fer servir ``ArrayList`` ens caldrà afegir a l'inici del
  nostre fitxer ``import java.util.ArrayList``, o be fer servir sempre el
  nom sencer ``java.util.ArrayList``.

* A la línia 1 del fragment de codi declarem la variable ``paraules`` com
  un ``ArrayList`` de strings (indiquem que són strings entre ``<>``) i la
  inicialitzem. Això ens deixa una seqüència buida que **només** podrà
  contenir strings.

* Per a poder saber quants elements hi ha a la nostra seqüència, haurem de
  fer servir ``size()`` en comptes de l'esperat ``length()``.

* Per poder accedir a un element a partir de la seva posició a la
  seqüència, fem servir ``get(index)``.

* Per a modificar el valor d'un dels elements, ho fem amb ``set(index,
  nouValor)``.

* Podem recórrer la seqüència amb el ``for`` millorat.

Una limitació de ``ArrayList`` és que no funciona amb tipus primitius. Què
passa si volem una seqüència d'enters?

Java ens ofereix uns tipus no primitius que es comporten com els primitius. Els
anomenarem tipus *embolcall*.

Alguns dels tipus principals amb els seus embolcalls:

=========   ==========
Primitius   Embolcalls
=========   ==========
boolean     Boolean
char        Character
double      Double
float       Float
int         Integer
=========   ==========

Així per exemple, podem crear una seqüència d'enters amb:

.. code-block: Java

    ArrayList<Integer> notes = new ArrayList<Integer>();

Pots consultar totes les funcionalitats de ``ArrayList`` a la
`documentació oficial
<https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/util/ArrayList.html>`_


Exercici 41. ☼ Practicant les operacions amb ``ArrayList``
==========================================================

Fes un programa senzill que demostri el funcionament de les diferents operacions
de ``ArrayList``.

Per exemple, crea una seqüència, afegeix alguns elements a diferents posicions,
elimina'n algun, etc.

Exercici 42. ☞ Notes en maco amb ``ArrayList``
==============================================

Rescata l'exercici :ref:`Notes en maco <exercici_notes_en_maco_java>` i
desenvolupa una funció anomenada ``String NotesUtils.sequenciaMaca(ArrayList<Integer>)``
que faci el mateix que l'anterior, però ara amb ``ArrayList``.

Exercici 43. ☼ Manteniment de notes amb ``ArrayList``
=====================================================

En aquesta ocasió farem una versió amb ``ArrayList`` del programa de :ref:`manteniment de
notes <exercici_manteniment_notes_python>` que vam fer en Python.

Exercici 44. ☼ Manteniment de notes ampliat
===========================================

Afegeix al manteniment de notes anterior, les opcions ``màxima``, ``mínima``,
``quantes`` i ``cerca n`` dels exercicis posteriors a :ref:`manteniment de notes
<exercici_manteniment_notes_python>`


Exercici 45. ☼ Modificació de notes amb ``ArrayList``
=====================================================

Amplia el programa de manteniment de notes amb la comanda ``modifica pos val``
que permet modificar el valor de la posició ``pos`` per ``val``.

Així, la següent interacció funcionaria:

.. code-block:: bash

    > mostra
    5, 4, 3, 6 i 9
    > modifica 1 10
    fet
    > mostra
    10, 4, 3, 6 i 9
    > modifica 6 10
    no tinc tantes notes
    > modifica 0 10
    Començo a comptar per 1
    > modifica x 10
    La posició ha de ser un enter positiu major que 0
    > modifica 30 x
    El valor ha de ser un enter positiu


Exercici 46. ☼ Inserció i eliminació de notes
=============================================

Afegeix les següents comandes addicionals al gestor de notes:

* ``insereix pos val``: insereix el valor ``val`` a la posició ``pos``. Cal
  comprovar que ``pos`` estigui entre 0 i la longitut de la seqüència. Altrament
  mostrarà els missatges d'error de ``modifica``.

  Fixa't que si demana inserir a la posició inmediatament posterior a la
  darrera, es comportarà com ``afegeix``.

* ``elimina pos``: elimina el valor que es troba a la posició ``pos``. En cas
  que ``pos`` no sigui vàlida, mostrarà els missatges d'error de ``modifica``.

* ``buida``: elimina tots els elements de la seqüència.


Un exemple d'interacció amb les noves operacions:

.. code-block:: bash

    > buida
    fet
    > mostra
    cap
    > insereix 1 5
    no tinc tantes notes
    > insereix 0 5
    fet
    > mostra
    5
    > insereix 0 8
    fet
    > mostra
    8 i 5
    > insereix 1 10
    fet
    > mostra
    8, 10 i 5
    > elimina 3
    no tinc tantes notes
    > elimina 1
    fet
    > mostra
    8 i 5
    > buida
    fet
    > mostra
    cap

