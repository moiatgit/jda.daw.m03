##############
Tipus de dades
##############

Com que a partir d'ara ens tocarà declarar explícitament el tipus de les
variables, ens els haurem d'aprendre.

Recordes els tipus que hem vist fins ara?

Aquí tens una senzilla taula de conversió.

========= ========
Python    Java
========= ========
int       int
float     float
bool      boolean
str       String
========= ========

La taula anterior no és, ni de bon tros, completa. On són per exemple els
tipus ``tuple`` i ``list``?

Tampoc no és precisa. Per exemple, el tipus *enter*, malgrat en tots dos
llenguatges es digui igual, no són ben bé el mateix. En Java, els enters
declarats amb ``int`` s'emmagatzemen **sempre** en un espai de 32 bits i,
per tant, tenen un valor màxim. En Python, en canvi, els valors d'aquest
tipus no tenen limitació més enllà de la capacitat del sistema que el
processi.

Java distingeix clarament entre tipus *primitius* i *objectes*. Per
simplificar, de moment podem entendre els tipus primitius com aquells que
disposen d'un valor directament associat a la variable a la que estan
assignats. En canvi, els objectes són valors més *complexos* i la variable
només serveix de referència al lloc de memòria on estan emmagatzemats.
Anirem treballant aquests conceptes constantment, així que no pateixis si
ho veus una mica confós encara.

.. uml::

    @startuml

    hide class circle
    skinparam class {
        BackgroundColor White
        BorderColor Black
        ArrowColor Black
    }

    class "Tipus de dades" as Tipus
    class "Tipus primitiu" as Primitiu
    Tipus <|-- Primitiu
    Tipus <|-- Objecte
    hide class circle
    hide class members

    Primitiu <|-- boolean
    Primitiu <|-- byte
    Primitiu <|-- char
    Primitiu <|-- double
    Primitiu <|-- float
    Primitiu <|-- int
    Primitiu <|-- long
    Primitiu <|-- short

    Objecte <|-- String

    @enduml

.. <|--

Cal tenir en compte què:

* Els literals de tipus enter en base 10, s'especifiquen directament amb
  el valor. Si ens interessa fer servir altres bases, ho podem fer com als
  següents exemples:

  .. code-block:: java

        42        // correspon al valor 42 en decimal
        0x2a      // correspon al valor 42 en hexadecimal
        0b101010  // correspon al valor 42 en binari

* El tipus ``boolean`` admet només els valors *true* i *false* (escrits
  així, en minúscules).

* Quan volem especificar que un literal és *long*, ho farem acabant-lo amb
  *l* o *L*. Per exemple:

  .. code-block:: java

        10000000000000000L

* els literals dels tipus amb coma flotant *float* els acabarem *f* o *F*.
  Els *double* no necessiten cap marca, però ho podem explicitar amb *d*,
  o *D*. També es pot especificar amb notació científica, fent servir
  ``e``. Exemples:

  .. code-block:: java

        10.5F       // és un float
        100.1D      // és un double
        100.1       // també un double com l'anterior
        1.001e2     // el mateix valor double que l'anterior


* el tipus *char* requereix dos bytes i els seus valors es codifiquen en
  Unicode, cosa que ens estalvia molts problemes als que fem servir
  caràcters com la *ç*.

  Podem assignar literals de tipus *char* envoltant-los entre cometes
  simples, com als exemples:

  .. code-block:: java

        char c = 'à';
        c = '\u00e0';   // és el codi Unicode per à o sigui que c continua valent el mateix!

  Podem fer servir alguns caràcters especials, com ara: \\t (tab), \\n
  (salt de línia), \\" (cometes dobles), \\' (cometes simples), and \\\\
  (la pròpia contrabarra).

* Quan el valor numèric que volem assignar a una variable numèrica es
  troba fora dels límits, el compilador ens donarà un error. Sempre podem
  fer servir *cast* per a informar al compilador que pot acceptar
  l'assignació, malgrat es pugui perdre informació:

  .. code-block:: java

        byte b;
        b = 1000;   // error en compilació: incompatible types: possible lossy conversion from int to byte
        b = (byte) 1000;    // el compilador ho accepta, però b guardarà 16 en comptes de 1000!


Un dels tipus no primitius que més es solen fer servir és *String*. Els
dissenyadors de Java han fet un esforç perquè l'ús dels strings sigui el
més fluït possible. Amb tot, venint de Python, probablement notaràs que
presenta algunes *incomoditats* respecte als strings que has gaudit fins
ara.


Exercici 6. Els tipus primitius de Java
=======================================

Llegeix `aquest article
<https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html>`_
de la documentació oficial de Java, que conté la descripció dels tipus
primitius del llenguatge.

Crea una taula amb les següents columnes:

* el tipus de dades en Java

* el nombre de bits amb que s'emmagatzema

* un exemple de valor

* el tipus més o menys equivalent en Python (Si no el coneixes, intenta
  fer una mica de recerca)

